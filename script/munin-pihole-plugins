#!/usr/bin/env bash

# munin-pihole-plugins
# saint-lascivious (Hayden Pearce) ©2022

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Contact: munin-pihole-plugins@sainternet.xyz

# munin-pihole-plugins version
# must follow 8 character major.minor.micro scheme
VERSION="07.09.00"

# source any external variables from munin-pihole-plugins.conf
# somewhat of a security risk honestly, i don't particularly
# like using . but if someone can write to /etc then you most
# certainly have bigger problems
# hey saint, what in kitten's whiskers is this bullshit all about?
# good question, see the following as to why we dance this stupid
# dance pseudo-sourcing /dev/null for shellcheck
# https://github.com/koalaman/shellcheck/wiki/SC1090
# tl;dr: it's dumb
external_config_dir="${EXTERNAL_CONFIG_DIR:-/etc/munin-pihole-plugins}"
external_config_file="${EXTERNAL_CONFIG_FILE:-munin-pihole-plugins.conf}"
if [[ -f "${external_config_dir}/${external_config_file}" ]]; then
    # shellcheck source=/dev/null
    . "${external_config_dir}/${external_config_file}"
fi

# environment variables with overrides
branch="${BRANCH:-development}"
dns_port="${DNS_PORT:-53}"
dns_server="${DNS_SERVER:-208.67.222.222}"
hold_duration="${HOLD_DURATION:-0}"
ignore_pihole_on_host="${IGNORE_PIHOLE_ON_HOST:-false}"
install_plugins="${INSTALL_PLUGINS:-true}"
install_script="${INSTALL_SCRIPT:-true}"
install_webserver="${INSTALL_WEBSERVER:-true}"
lighttpd_webroot="${LIGHTTPD_WEBROOT:-/var/www/html}"
munin_dir="${MUNIN_DIR:-/etc/munin}"
munin_config_dir="${MUNIN_CONFIG_DIR:-${munin_dir}/munin-conf.d}"
munin_plugin_dir="${MUNIN_PLUGIN_DIR:-/usr/share/munin/plugins}"
munin_version="${MUNIN_VERSION:-stable}"
node_plugin_dir="${NODE_PLUGIN_DIR:-${munin_dir}/plugins}"
plugin_config_dir="${PLUGIN_CONFIG_DIR:-${munin_dir}/plugin-conf.d}"
plugin_list="${PLUGIN_LIST:-blocked cache cache_by_type clients percent queries replies_by_type status unique_domains}"
proxy_config_dir="${PROXY_CONFIG_DIR:-/etc/lighttpd}"
rfc3339_date="$(date --rfc-3339="seconds")"
script_dir="${SCRIPT_DIR:-/usr/local/bin}"
show_color="${SHOW_COLOR:-true}"
skip_dependency_check="${SKIP_DEPENDENCY_CHECK:-false}"
update_self="${UPDATE_SELF:-true}"
verbosity_level="${VERBOSITY_LEVEL:-3}"

# environment variables without
# note: the spaces at the ends of the environment variable
# values for *_dependencies and *_services are intentional
# and must be retained for the sake of easy string concat
current_dir="$(dirname "$(readlink -f "$0")")"
plugin_dependencies="curl munin-node "
plugin_services="munin-node "
proxy_repo="https://raw.githubusercontent.com/saint-lascivious/lighttpd-external-munin-proxy"
script_dependencies="init-system-helpers wget "
terminal_height="$(stty size | cut -d " " -f1)"
terminal_width="$(stty size | cut -d " " -f2)"
webserver_dependencies="lighttpd munin "
webserver_services="lighttpd munin "

# we just won't talk about this
temp_dir="${TMPDIR:-${TEMP:-${TMP:-/tmp}}}"

# fallbacks for out of range or unexpected hold durations
# set to 0 when lower than 0, 5 when higher than 5
# set to 0 if it's something entirely unexpected
if [[ "${hold_duration}" =~ ^(-)?[0-9]+$ ]]; then
    if [[ "${hold_duration}" -lt "0" ]]; then
        hold_duration="0"
    else
        if [[ "${hold_duration}" -gt "5" ]]; then
            hold_duration="5"
        fi
    fi
else
    hold_duration="0"
fi

# fallbacks for out of range or unexpected verbosity levels
# set to 0 when lower than 0, 4 when higher than 4
# set to 3 if it's something entirely unexpected
if [[ "${verbosity_level}" =~ ^(-)?[0-9]+$ ]]; then
    if [[ "${verbosity_level}" -lt "0" ]]; then
        verbosity_level="0"
    else
        if [[ "${verbosity_level}" -gt "4" ]]; then
            verbosity_level="4"
        fi
    fi
else
    verbosity_level="3"
fi

# define colours for later use, if supported
# allow the display of colours to be disabled
if [[ -t "1" ]] && [[ $(tput colors) -ge "8" ]]; then
    if [[ "${show_color}" == "true" ]]; then
        WHITE="\\e[97m"
        RED="\\e[31m"
        ORANGE="\\e[33m"
        YELLOW="\\e[93m"
        GREEN="\\e[32m"
        BLUE="\\e[94m"
        INDIGO="\\e[34m"
        VIOLET="\\e[35m"
        RESET="\\e[0m"
    else
        WHITE=""
        RED=""
        ORANGE=""
        YELLOW=""
        GREEN=""
        BLUE=""
        INDIGO=""
        VIOLET=""
        RESET=""
    fi
else
    WHITE=""
    RED=""
    ORANGE=""
    YELLOW=""
    GREEN=""
    BLUE=""
    INDIGO=""
    VIOLET=""
    RESET=""
fi

# simple privilege check
check_privilege() {
    if [[ ! "${EUID}" -eq "0" ]];then
        if [[ -x "$(command -v sudo)" ]]; then
            exec sudo -E bash "$0" "$@"
            exit "$?"
        else
            reverberate "error" "Insufficient privileges"
            reverberate "info" "Install sudo or run munin-pihole-plugins as root"
        reverberate "exit"
        exit 1
        fi
    fi
}

# there are ways of doing this without spawning a child script
# but they all suck, and/or are extremely convoluted
# this approach is a trade-off
update_script() {
    cat > "${temp_dir}/.munin-pihole-plugins_update" << EOF
#!/usr/bin/env bash

# .munin-pihole-plugins_update
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

VERSION="${VERSION}"

verbosity_level="${verbosity_level}"

# a simple self update function for the munin-pihole-plugins script
update_now() {
    if [[ -x "$(command -v wget)" ]]; then
        if [[ "${verbosity_level}" -ge "4" ]]; then
            wget -q --show-progress "${plugin_domain}" -O "${current_dir}/munin-pihole-plugins" || return
        else
            wget -q "${plugin_domain}" -O "${current_dir}/munin-pihole-plugins" || return
        fi
    else
        if [[ "${verbosity_level}" -gt "0" ]]; then
            echo -e "\\n  [${RED}!${RESET}] ${RED}The required command 'wget' was not found${RESET}"
            echo -e "  [${RED}✗${RESET}] wget"
            echo -e "\\n  [${RED}!${RESET}] ${RED}Exiting $0${RESET}"
        fi
        exit 1
    fi
    chmod +x "${current_dir}/munin-pihole-plugins" || return
    if [[ "${current_dir}" == "${script_dir}" ]]; then
        if [[ -d "/etc/bash_completion.d" ]]; then
            if [[ "${verbosity_level}" -ge "4" ]]; then
                if [[ -f "/etc/bash_completion.d/munin-pihole-plugins" ]]; then
                    wget -q --show-progress "${plugin_repo}/etc/bash_completion.d/munin-pihole-plugins" -O "/etc/bash_completion.d/munin-pihole-plugins" || return
                else
                    wget -q --show-progress "${plugin_repo}/etc/bash_completion.d/munin-pihole-plugins" -P "/etc/bash_completion.d" || return
                fi
            else
                if [[ -f "/etc/bash_completion.d/munin-pihole-plugins" ]]; then
                    wget -q "${plugin_repo}/etc/bash_completion.d/munin-pihole-plugins" -O "/etc/bash_completion.d/munin-pihole-plugins" || return
                else
                    wget -q "${plugin_repo}/etc/bash_completion.d/munin-pihole-plugins" -P "/etc/bash_completion.d" || return
                fi
            fi
        fi
    fi
    if [[ "${verbosity_level}" -ge "1" ]]; then
        echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}Done${RESET}"
    fi
    if [[ "${verbosity_level}" -ge "3" ]]; then
        echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}Restarting munin-pihole-plugins after update${RESET}"
    fi
    if [[ "${verbosity_level}" -ge "4" ]]; then
        echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}Restarting in ${hold_duration} seconds${RESET}"
        sleep "${hold_duration}"
    fi
    clear
    exec env UPDATE_SELF="false" /bin/bash "$0" "$@"
}

update_now
EOF
    chmod +x "${temp_dir}/.munin-pihole-plugins_update"
    reverberate "info" "Updating the munin-pihole-plugins script"
    exec /bin/bash "${temp_dir}/.munin-pihole-plugins_update"
}

# user request, variable output delay
# many actions are near instantaneous, add some dwell time (default 0) after
# output
hold_up() {
    sleep "${hold_duration}"
}

# echo wrapper handling verbosity levels and common output
# 0 - silent
# 1 - + errors
# 2 - ++ warnings/questions
# 3 - +++ information
# 4 - ++++ additional information
reverberate() {
    case "$1" in
        "additional_info"                                   )
            if [[ "${verbosity_level}" -ge "4" ]]; then
                echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}$2${RESET}"
                hold_up
            fi
        ;;
        "config"                                            )
            if [[ "${verbosity_level}" -ge "3" ]]; then
                if [[ -f "${script_dir}/munin-pihole-plugins" ]]; then
                    config_text="  ${WHITE}munin-pihole-plugins --configure $2${RESET} VALUE"
                else
                    config_text="  ${WHITE}export $2=\"VALUE\"${RESET}"
                fi
                echo -e "${config_text}"
                hold_up
            fi
        ;;
        "error"                                             )
            if [[ "${verbosity_level}" -ge "1" ]]; then
                echo -e "\\n  [${RED}!${RESET}] ${RED}$2${RESET}"
                hold_up
            fi
        ;;
        "exit"                                              )
            if [[ "${verbosity_level}" -ge "1" ]]; then
                echo -e "\\n  [${RED}!${RESET}] ${RED}Exiting $0${RESET}"
                hold_up
            fi
        ;;
        "failure"                                           )
            if [[ "${verbosity_level}" -ge "3" ]]; then
                echo -e "  [${RED}✗${RESET}] $2"
                hold_up
            fi
        ;;
        "footer"                                            )
            if [[ "${verbosity_level}" -ge "1" ]]; then
                echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}Done${RESET}\\n"
                hold_up
            fi
        ;;
        "header"                                            )
            if [[ "${verbosity_level}" -ge "1" ]]; then
                echo -e "$2"
                hold_up
            fi
        ;;
        "info"                                              )
            if [[ "${verbosity_level}" -ge "3" ]]; then
                echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}$2${RESET}"
                hold_up
            fi
        ;;
        "question"                                          )
            if [[ "${verbosity_level}" -ge "2" ]]; then
                echo -e "\\n  [${BLUE}?${BLUE}] ${BLUE}$2${RESET}"
                hold_up
            fi
        ;;
        "success"                                           )
            if [[ "${verbosity_level}" -ge "3" ]]; then
                echo -e "  [${GREEN}✓${RESET}] $2"
                hold_up
            fi
        ;;
        "warning"                                           )
            if [[ "${verbosity_level}" -ge "2" ]]; then
                echo -e "\\n  [${YELLOW}⚠${RESET}] ${YELLOW}$2${RESET}"
                hold_up
            fi
        ;;
        *                                                   )
            if [[ "${verbosity_level}" -ge "4" ]]; then
                echo -e "  $1"
                hold_up
            fi
        ;;
    esac
}

# mandatory horrific ascii header
obnoxious_header() {
    if [[ "${terminal_height}" -ge "12" ]] && [[ "${terminal_width}" -ge "80" ]]; then
        reverberate "header" "\\n${RED}                  _             _ _        _            _           _ v${VERSION}
${ORANGE}   _ __ _  _ _ _ (_)_ _ __ _ __(_) |_  ___| |___ _ _ __| |_  _ __ _(_)_ _  ___
${YELLOW}  | '  \\ || | ' \\| | ' \\__| '_ \\ | ' \\/ _ \\ / -_)_| '_ \\ | || / _\` | | ' \\(_-<
${GREEN}  |_|_|_\\_,_|_||_|_|_||_| | .__/_|_||_\\___/_\\___| | .__/_|\\_,_\\__, |_|_||_/__/
${BLUE}                          |_|                     |_|         |___/
\\n${INDIGO} Munin plugins and management script for monitoring various Pi-hole® statistics
\\n${VIOLET} ${rfc3339_date}${RESET}"
    fi
}

# is this a pihole host?
# and if so, can we support its API?
# yes - i am aware that pihole_version is...non optimal, there is probably
# going to be a much better way to strip the text and formatting from pihole's
# version output
check_pihole() {
    reverberate "info" "Checking if this is a Pi-hole® host"
    if [[ -x "$(command -v pihole)" ]]; then
        pihole_version="$(pihole -v | grep "Pi-hole" | sed 's/Pi-hole version is v//; s/[(][^)]*[)]//; s/[^.0-9]*//g')"
        # shellcheck disable=SC2071
        if [[ "${pihole_version}" > "6" ]]; then
            if [[ "${ignore_pihole_on_host}" != "false" ]]; then
                reverberate "error" "Incompatible Pi-hole® version v${pihole_version}"
                reverberate "info" "Supported Pi-hole® versions ≤ v5.*"
                reverberate "exit"
                exit 1
            else
                reverberate "info" "Ignoring Pi-hole® version v${pihole_version}"
                pihole_on_host="false"
            fi
        else
            reverberate "success" "$(command -v pihole) v${pihole_version}"
            pihole_on_host="true"
        fi
    else
        reverberate "failure" "pihole"
        pihole_on_host="false"
    fi
}

# basic dependency handling with dpkg-query and apt
# can be disabled with SKIP_DEPENDENCY_CHECK set to any value other than false
install_dependencies() {
    if [[ "${install_plugins}" == "true" ]]; then
        dependency_list+="${plugin_dependencies}"
    fi
    if [[ "${install_script}" == "true" ]]; then
        dependency_list+="${script_dependencies}"
    fi
    if [[ "${install_webserver}" == "true" ]]; then
        dependency_list+="${webserver_dependencies}"
    fi
    if [[ -x "$(command -v dpkg-query)" ]]; then
        if [[ -x "$(command -v apt)" ]]; then
            reverberate "info" "Checking for required dependencies"
            for dependency_id in ${dependency_list}; do
                package_query="$(dpkg-query -W --showformat='${Status}\n' "${dependency_id}" | grep "install ok installed")"
                if [[ -n "${package_query}" ]]; then
                    reverberate "success" "${dependency_id}"
                else
                    reverberate "failure" "${dependency_id}"
                    reverberate "info" "Installing required package ${dependency_id}"
                    if [[ "${verbosity_level}" -gt "0" ]]; then
                        apt install -qq "${dependency_id}"
                    else
                        apt install -qq "${dependency_id}" > /dev/null 2>&1
                    fi
                    reverberate "success" "${dependency_id}"
                fi
            done
        else
            reverberate "error" "The required command 'apt' was not found"
            reverberate "failure" "apt"
            reverberate "exit"
            exit 1
        fi
    else
        reverberate "error" "The required command 'dpkg-query' was not found"
        reverberate "failure" "dpkg-query"
        reverberate "exit"
        exit 1
    fi
}

# simple wget wrapper
download() {
    if [[ -x "$(command -v wget)" ]]; then
        if [[ "${verbosity_level}" -ge "4" ]]; then
            wget -q --show-progress "$@" || return
        else
            wget -q "$@" || return
        fi
    else
        reverberate "error" "The required command 'wget' was not found"
        reverberate "failure" "wget"
        reverberate "exit"
        exit 1
    fi
}

# installs a related project lighttpd-external-munin-proxy
# backup any existing non-zero lighttpd external.conf if no backup exists
# safely merging any existing external.conf properties without conflict
# would be tedious and annoying, and is out of scope at this point
configure_proxy() {
    proxy_config="${proxy_config_dir}/external.conf"
    if [[ -d "${proxy_config_dir}" ]]; then
        if [[ -s "${proxy_config}" ]]; then
            if [[ ! -f "${proxy_config}.orig" ]]; then
                mv "${proxy_config}" "${proxy_config}.orig" || return
                reverberate "info" "Existing lighttpd external.conf backed up to"
                reverberate "success" "${proxy_config}.orig"
            fi
        fi
        reverberate "info" "Installing Munin webserver lighttpd proxy configuration"
        if [[ "${munin_version}" == "stable" ]]; then
            download "${proxy_repo}/master/etc/lighttpd/external.conf" -O "${proxy_config}"
        else
            if [[ "${munin_version}" == "latest" ]]; then
                download "${proxy_repo}/latest/etc/lighttpd/external.conf" -O "${proxy_config}"
            else
                reverberate "error" "Invalid Munin version"
                reverberate "failure" "${munin_version}"
                reverberate "info" "Valid Munin versions are"
                reverberate "success" "latest"
                reverberate "success" "stable"
                reverberate "exit"
                exit 1
            fi
        fi
        reverberate "success" "${proxy_config}"
    else
        reverberate "error" "No lighttpd configuration directory found"
        reverberate "failure" "${proxy_config_dir}"
        reverberate "additional_info" "If this directory is located at a different path try"
        reverberate "config" "PROXY_CONFIG_DIR"
        reverberate "exit"
        exit 1
    fi
}

# configure the munin monitoring environment
# two different approaches may be used to set the graph strategy depending on
# the existence of the munin_config_dir
# if it is not found munin-pihole-plugins will attempt to edit the munin.conf
# file directly
configure_munin() {
    if [[ -d "${munin_config_dir}" ]]; then
        if [[ ! -f "${munin_config_dir}/99-graph-strategy.conf" ]]; then
            reverberate "info" "Installing Munin server graph strategy configuration"
            download "${plugin_repo}/etc/munin/munin-conf.d/99-graph-strategy.conf" -P "${munin_config_dir}"
            reverberate "success" "${munin_config_dir}/99-graph-strategy.conf"
        fi
    else
        reverberate "info" "Attempting fallback configuration editing munin.conf directly"
        if [[ -d "${munin_dir}" ]]; then
            if [[ -f "${munin_dir}/munin.conf" ]]; then
                sed -i "s/^#html_strategy cron/html_strategy cgi/g" "${munin_dir}/munin.conf" || return
                sed -i "s/^#graph_strategy cron/graph_strategy cgi/g" "${munin_dir}/munin.conf" || return
            else
                reverberate "error" "No munin.conf file found"
                reverberate "failure" "${munin_dir}/munin.conf"
                reverberate "additional_info" "If this file is located at a different path try"
                reverberate "config" "MUNIN_DIR"
                reverberate "exit"
                exit 1
            fi
        else
            reverberate "error" "No Munin directory found"
            reverberate "failure" "${munin_dir}"
            reverberate "additional_info" "If this directory is located at a different path try"
            reverberate "config" "MUNIN_DIR"
            reverberate "exit"
            exit 1
        fi
        reverberate "error" "No Munin configuration directory found"
        reverberate "failure" "${munin_config_dir}"
        reverberate "additional_info" "If this directory is located at a different path try"
        reverberate "config" "MUNIN_CONFIG_DIR"
        reverberate "exit"
        exit 1
    fi
}

# remove all existing munin-pihole-plugins plugins and symbolic links
# munin will reap abandoned plugin .rrd files itself
# legacy plugins names are retained so we don't leave any orphaned plugins
# behind from ancient versions of munin-pihole-plugins, and/or switching from
# the individual plugins to the monolithic plugin
uninstall_plugins() {
    all_plugins="blocked blockrate cache cacheinfo cacherate cache_by_type cache_info clients hits percent queries reply replies_by_type status unique unique_domains"
    if [[ -d "${munin_plugin_dir}" ]]; then
        reverberate "additional_info" "Removing any existing munin-pihole-plugins plugin(s)"
        if [[ -f "${munin_plugin_dir}/pihole_" ]]; then
            rm "${munin_plugin_dir}/pihole_" || return
            if [[ "${verbosity_level}" -ge "4" ]]; then
                reverberate "success" "${munin_plugin_dir}/pihole_"
            fi
        fi
        for plugin_id in ${all_plugins}; do
            if [[ -f "${munin_plugin_dir}/pihole_${plugin_id}" ]]; then
                rm "${munin_plugin_dir}/pihole_${plugin_id}" || return
                if [[ "${verbosity_level}" -ge "4" ]]; then
                    reverberate "success" "${munin_plugin_dir}pihole_${plugin_id}"
                fi
            fi
        done
    fi
    if [[ -d "${node_plugin_dir}" ]]; then
        reverberate "additional_info" "Removing any existing munin-pihole-plugins symbolic links"
        for plugin_id in ${all_plugins}; do
            if [[ -h "${node_plugin_dir}/pihole_${plugin_id}" ]]; then
                rm "${node_plugin_dir}/pihole_${plugin_id}" || return
                if [[ "${verbosity_level}" -ge "4" ]]; then
                    reverberate "success" "${node_plugin_dir}/pihole_${plugin_id}"
                fi
            fi
        done
    fi
}

# installs munin-pihole-plugins plugins and symbolic links
# plugins to be installed can be configured using the PLUGIN_LIST variable
install_plugins() {
    if [[ -d "${munin_plugin_dir}" ]]; then
        if [[ -d "${node_plugin_dir}" ]]; then
            reverberate "info" "Installing munin-pihole-plugins plugin"
            download "${plugin_repo}/usr/share/munin/plugins/pihole_" -P "${munin_plugin_dir}"
            chmod +x "${munin_plugin_dir}/pihole_" || return
            reverberate "success" "${munin_plugin_dir}/pihole_"
            reverberate "info" "Creating selected munin-pihole-plugins symbolic links"
            for plugin_id in ${plugin_list}; do
                ln -s "${munin_plugin_dir}/pihole_" "${node_plugin_dir}/pihole_${plugin_id}" || return
                reverberate "success" "${node_plugin_dir}/pihole_${plugin_id}"
            done
        else
            reverberate "error" "No Munin node plugin directory found"
            reverberate "failure" "${node_plugin_dir}"
            reverberate "additional_info" "If this directory is located at a different path try"
            reverberate "config" "NODE_PLUGIN_DIR"
            reverberate "exit"
            exit 1
        fi
    else
        reverberate "error" "No Munin plugin directory found"
        reverberate "failure" "${munin_plugin_dir}"
        reverberate "additional_info" "If this directory is located at a different path try"
        reverberate "config" "MUNIN_PLUGIN_DIR"
        reverberate "exit"
        exit 1
    fi
}

# installs a default configuration file
# this should not be required but if it does have to be configured it is nicer
# if it already exists
configure_plugins() {
    if [[ -d "${plugin_config_dir}" ]]; then
        if [[ ! -f  "${plugin_config_dir}/pihole.conf" ]]; then
            download "${plugin_repo}/etc/munin/plugin-conf.d/pihole.conf" -P "${plugin_config_dir}"
            reverberate "info" "Default plugin configuration saved"
            reverberate "success" "${plugin_config_dir}/pihole.conf"
        fi
    else
        reverberate "error" "No Munin plugin configuration directory found"
        reverberate "failure" "${plugin_config_dir}"
        reverberate "additional_info" "If this directory is located at a different path try"
        reverberate "config" "PLUGIN_CONFIG_DIR"
        reverberate "exit"
        exit 1
    fi
    if [[ "${pihole_on_host}" == "false" ]]; then
        reverberate "warning" "The Pi-hole® command 'pihole' was not found on this host"
        reverberate "additional_info" "If this was intentional you will need to edit"
        reverberate "${plugin_config_dir}/pihole.conf"
        reverberate "and replace the host and setupvars values with those of your Pi-hole® host"
    fi
}

# restart relevant services
restart_services() {
    if [[ "${install_plugins}" == "true" ]]; then
        service_list+="${plugin_services}"
    fi
    if [[ "${install_webserver}" == "true" ]]; then
        service_list+="${webserver_services}"
    fi
    if [[ -n "${service_list}" ]]; then
        if [[ -x "$(command -v service)" ]]; then
            reverberate "info" "Restarting services"
            for service_id in ${service_list}; do
                service "${service_id}" restart
                reverberate "success" "${service_id}"
            done
        else
            reverberate "error" "The required command 'service' was not found"
            reverberate "failure" "service"
            reverberate "exit"
            exit 1
        fi
    fi
}

# installs the munin-pihole-plugins script on the host
# warn the user if script_dir is not in their path and suggest how to add it
install_script() {
    if [[ -d "${script_dir}" ]]; then
        if [[ -f "${script_dir}/munin-pihole-plugins" ]]; then
            download "${plugin_repo}/script/munin-pihole-plugins" -O "${script_dir}/munin-pihole-plugins"
        else
            download "${plugin_repo}/script/munin-pihole-plugins" -P "${script_dir}"
        fi
        chmod +x "${script_dir}/munin-pihole-plugins" || return
        reverberate "info" "A copy of the munin-pihole-plugins script was installed"
        reverberate "success" "${script_dir}/munin-pihole-plugins"
        if [[ -d "/etc/bash_completion.d" ]]; then
            if [[ -f "/etc/bash_completion.d/munin-pihole-plugins" ]]; then
                download "${plugin_repo}/etc/bash_completion.d/munin-pihole-plugins" -O "/etc/bash_completion.d/munin-pihole-plugins"
            else
                download "${plugin_repo}/etc/bash_completion.d/munin-pihole-plugins" -P "/etc/bash_completion.d"
            fi
            reverberate "info" "A copy of the munin-pihole-plugins bash-completion script was installed"
            reverberate "success" "/etc/bash_completion.d/munin-pihole-plugins"
            reverberate "additional_info" "To begin using it immediately, open a new terminal or type"
            reverberate ". /etc/bash_completion"
        fi
        if [[ ":${PATH}:" != *":${script_dir}:"* ]]; then
            reverberate "warning" "The munin-pihole-plugins script directory is not in your \$PATH"
            reverberate "failure" "\$PATH"
            reverberate "additional_info" "To add the munin-pihole-plugins script directory to your \$PATH try"
            reverberate "export PATH=\"\$PATH:${script_dir}\""
        else
            reverberate "additional_info" "The munin-pihole-plugins script directory is in your \$PATH"
            if [[ "${verbosity_level}" -ge "4" ]]; then
                reverberate "success" "\$PATH"
            fi
            reverberate "additional_info" "You can now use munin-pihole-plugins just as you would any other command"
        fi
    else
        reverberate "error" "No directory found"
        reverberate "failure" "${script_dir}"
        reverberate "additional_info" "If this directory is located at a different path try"
        reverberate "config" "SCRIPT_DIR"
        reverberate "exit"
        exit 1
    fi
}

# spawns a child script to uninstall a locally installed munin-pihole-plugins
# script if present
uninstall_script() {
    cat > "${temp_dir}/.munin-pihole-plugins_uninstall" << EOF
#!/usr/bin/env bash

# .munin-pihole-plugins_uninstall
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

VERSION="${VERSION}"

verbosity_level="${verbosity_level}"

# uninstalls a locally installed copy of the munin-pihole-plugins script
# users may set external config dir/file to something mission critical,
# hence the reasoning for leaving the hardcoded config dir/file path
# intact here rather than following variables
uninstall_now() {
    if [[ -f "/etc/bash_completion.d/munin-pihole-plugins" ]]; then
        rm "/etc/bash_completion.d/munin-pihole-plugins" || return
    fi
    if [[ -d "/etc/munin-pihole-plugins" ]]; then
        rm -fr "/etc/munin-pihole-plugins" || return
    fi
    rm "${script_dir}/munin-pihole-plugins" || return
    if [[ "${verbosity_level}" -ge "3" ]]; then
        echo -e "\\n  [${WHITE}ℹ${RESET}] ${GREEN}Done${RESET}\\n"
    fi
}

uninstall_now
EOF
    chmod +x "${temp_dir}/.munin-pihole-plugins_uninstall"
    reverberate "info" "Uninstalling the munin-pihole-plugins script"
    exec /bin/bash "${temp_dir}/.munin-pihole-plugins_uninstall"
}

# an opportunistic pagination wrapper, more or less
some() {
    if [[ "${terminal_height}" -lt "${min_height}" ]]; then
        if [[ -x "$(command -v less)" ]]; then
            echo -e "$@" | less
        else
            if [[ -x "$(command -v more)" ]]; then
                echo -e "$@" | more
            else
                echo -e "$@"
            fi
        fi
    else
        echo -e "$@"
    fi
}

# check the version reported by munin-pihole-plugins.sainternet.xyz
# nslookup, as far as i am aware, has no analogue to dig's +short, so it
# requires a bunch of additional bullshit to strip the version from the txt
# record
# why tail 9, when we want 8 characters? fun fact: echo appends a newline
check_version() {
    if [[ "${branch}" == "master" ]]; then
        plugin_domain="munin-pihole-plugins.sainternet.xyz"
        plugin_repo="https://raw.githubusercontent.com/saint-lascivious/munin-pihole-plugins/master"
    else
        if [[ "${branch}" == "development" ]]; then
            plugin_domain="munin-pihole-plugins-dev.sainternet.xyz"
            plugin_repo="https://raw.githubusercontent.com/saint-lascivious/munin-pihole-plugins/development"
        else
            reverberate "error" "Invalid munin-pihole-plugins branch"
            reverberate "failure" "${branch}"
            reverberate "info" "Valid munin-pihole-plugins branches are"
            reverberate "success" "development"
            reverberate "success" "master"
            reverberate "exit"
            exit 1
        fi
    fi
    if [[ -x "$(command -v dig)" ]]; then
        version_query="$(dig txt +short +timeout=5 +tries=2 "${plugin_domain}" @"${dns_server}" -p "${dns_port}" | sed s'/[^0-9.]//g')"
    else
        if [[ -x "$(command -v nslookup)" ]]; then
            version_query="$(nslookup -port="${dns_port}" -retry=2 -timeout=5 -type=txt "${plugin_domain}" "${dns_server}" | grep '"version: [0-9].[0-9].[0-9]"' | sed s'/[^0-9.]//g' | tail -c 9)"
        fi
    fi
    if [[ -n "${version_query}" ]]; then
        remote_version="${version_query}"
    fi
}

# simple wrapper to set or reset external variables in the format:
# EXTERNAL_VAR=EXTERNAL_VAR_VALUE
# handles creation of the external variable configuration file including path
# if required, split up from the labyrinthine mess that is config_function to
# limit some of the needless duplication that was happening there
# usage:
# 'transmogrify EXTERNAL_VAR EXTERNAL_VAR_VALUE [[/PATH/TO/]EXTERNAL_VAR_FILE]'
transmogrify() {
    external_var="$1"
    external_var_value="$2"
    if [[ -n "$3" ]]; then
        external_var_file="$3"
    else
        external_var_file="${external_config_dir}/${external_config_file}"
    fi
    if [[ ! -d "${external_config_dir}" ]]; then
        mkdir -p "${external_config_dir}" || return
    fi
    if [[ ! -f "${external_config_dir}/${external_config_file}" ]]; then
        cat > "${external_config_dir}/${external_config_file}" << EOF
# external configuration file created by $0
# ${rfc3339_date}

EOF
    fi
    case "$2" in
        "RESET"                                             )
            if grep -q "^${external_var}=" "${external_var_file}"; then
                sed -i "/^${external_var}/d" "${external_var_file}" || return
            fi
        ;;
        *                                                   )
            if grep -q "^${external_var}=" "${external_var_file}"; then
                sed -i "/^${external_var}=/c\\${external_var}=\"${external_var_value}\"" "${external_var_file}" || return
                some "${external_var}: ${external_var_value}"
            else
                echo "${external_var}=\"${external_var_value}\"" >> "${external_var_file}" || return
                some "${external_var}: ${external_var_value}"
            fi
        ;;
    esac
}

# display munin-pihole-plugins environment variables and their current values
# there were too many variables to list in the main help text
# triggers are available for popular DNS_SERVER values
# - cloudflare 1.1.1.1
# - comodo     8.26.56.26
# - google     8.8.8.8
# - localhost  127.0.0.1
# - opendns    208.67.222.222
# - quad9      9.9.9.9
config_function() {
    min_height="3"
    if [[ -n "$3" ]]; then
        external_var_list="BRANCH DNS_PORT DNS_SERVER EXTERNAL_CONFIG_DIR EXTERNAL_CONFIG_FILE IGNORE_PIHOLE_ON_HOST INSTALL_PLUGINS INSTALL_SCRIPT INSTALL_WEBSERVER LIGHTTPD_WEBROOT MUNIN_DIR MUNIN_CONFIG_DIR MUNIN_PLUGIN_DIR MUNIN_VERSION NODE_PLUGIN_DIR PLUGIN_CONFIG_DIR PLUGIN_LIST PROXY_CONFIG_DIR SCRIPT_DIR SHOW_COLOR SKIP_DEPENDENCY_CHECK UPDATE_SELF VERBOSITY_LEVEL"
        for external_var_id in ${external_var_list}; do
            if [[ "$2" == "${external_var_id}" ]]; then
                if [[ -f "${script_dir}/munin-pihole-plugins" ]]; then
                    check_privilege "$@"
                    case "$3" in
                        "RESET"                             )
                            transmogrify "$2" "RESET"
                        ;;
                        "CLOUDFLARE"                        )
                            if [[ "$2" == "DNS_SERVER" ]]; then
                                transmogrify "$2" "1.1.1.1"
                            fi
                        ;;
                        "COMODO"                            )
                            if [[ "$2" == "DNS_SERVER" ]]; then
                                transmogrify "$2" "8.26.56.26"
                            fi
                        ;;
                        "GOOGLE"                            )
                            if [[ "$2" == "DNS_SERVER" ]]; then
                                transmogrify "$2" "8.8.8.8"
                            fi
                        ;;
                        "LOCALHOST"                         )
                            if [[ "$2" == "DNS_SERVER" ]]; then
                                transmogrify "$2" "127.0.0.1"
                            fi
                        ;;
                        "OPENDNS"                           )
                            if [[ "$2" == "DNS_SERVER" ]]; then
                                transmogrify "$2" "208.67.222.222"
                            fi
                        ;;
                        "QUAD9"                             )
                            if [[ "$2" == "DNS_SERVER" ]]; then
                                transmogrify "$2" "9.9.9.9"
                            fi
                        ;;
                        *                                   )
                            if [[ "$2" == "DNS_PORT" ]]; then
                                if [[ "$3" =~ ^[0-9]+$ ]]; then
                                    if [[ "$3" -ge "0" ]] && [[ "$3" -le "65535" ]]; then
                                        transmogrify "$2" "$3"
                                    else
                                        some "munin-pihole-plugins: $3 doesn't look like a valid port number
The DNS_PORT value must be between 0 and 65535"
                                    fi
                                else
                                    some "munin-pihole-plugins: $3 doesn't look like a valid port number
The DNS_PORT value must be a positive integer"
                                fi
                            else
                                if [[ "$2" == "DNS_SERVER" ]]; then
                                    if [[ "$3" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then
                                        transmogrify "$2" "$3"
                                    else
                                        some "munin-pihole-plugins: $3 doesn't look like a valid IP address
The DNS_SERVER value must be between 0.0.0.0 and 255.255.255.255"
                                    fi
                                else
                                    transmogrify "$2" "$3"
                                fi
                            fi
                        ;;
                    esac
                else
                    min_height="4"
                    some "munin-pihole-plugins: function unavailable
The munin-pihole-plugins script must be installed to use this function
Type \"munin-pihole-plugins --install --script\" to install it now"
                fi
            fi
        done
    else
        case "$2" in
            "BRANCH"                                        )
                some "BRANCH: ${branch}"
            ;;
            "DNS_PORT"                                      )
                some "DNS_PORT: ${dns_port}"
            ;;
            "DNS_SERVER"                                    )
                some "DNS_SERVER: ${dns_server}"
            ;;
            "EXTERNAL_CONFIG_DIR"                           )
                some "EXTERNAL_CONFIG_DIR: ${external_config_dir}"
            ;;
            "EXTERNAL_CONFIG_FILE"                          )
                some "EXTERNAL_CONFIG_FILE: ${external_config_file}"
            ;;
            "HOLD_DURATION"                                 )
                some "HOLD_DURATION: ${hold_duration}"
            ;;
            "IGNORE_PIHOLE_ON_HOST"                         )
                some "IGNORE_PIHOLE_ON_HOST: ${ignore_pihole_on_host}"
            ;;
            "INSTALL_PLUGINS"                               )
                some "INSTALL_PLUGINS: ${install_plugins}"
            ;;
            "INSTALL_SCRIPT"                                )
                some "INSTALL_SCRIPT: ${install_script}"
            ;;
            "INSTALL_WEBSERVER"                             )
                some "INSTALL_WEBSERVER: ${install_webserver}"
            ;;
            "LIGHTTPD_WEBROOT"                              )
                some "LIGHTTPD_WEBROOT: ${lighttpd_webroot}"
            ;;
            "MUNIN_DIR"                                     )
                some "MUNIN_DIR: ${munin_dir}"
            ;;
            "MUNIN_CONFIG_DIR"                              )
                some "MUNIN_CONFIG_DIR: ${munin_config_dir}"
            ;;
            "MUNIN_PLUGIN_DIR"                              )
                some "MUNIN_PLUGIN_DIR: ${munin_plugin_dir}"
            ;;
            "MUNIN_VERSION"                                 )
                some "MUNIN_VERSION: ${munin_version}"
            ;;
            "NODE_PLUGIN_DIR"                               )
                some "NODE_PLUGIN_DIR: ${node_plugin_dir}"
            ;;
            "PLUGIN_CONFIG_DIR"                             )
                some "PLUGIN_CONFIG_DIR: ${plugin_config_dir}"
            ;;
            "PLUGIN_LIST"                                   )
                min_height="14"
                some "PLUGIN_LIST: ${plugin_list}
\\nPlugin\\t\\tDescription
 blocked\\t This plugin shows the number of domains blocked by Pi-hole®.
 cache\\t\\t This plugin shows Pi-hole®'s cache.
 cache_by_type\\t This plugin shows Pi-hole®'s cache by type.
 clients\\t This plugin shows clients seen by Pi-hole®.
 percent\\t This plugin shows Pi-hole®'s blocked query percentage.
 queries\\t This plugin shows queries seen by Pi-hole®.
 replies_by_type This plugin shows Pi-hole®'s replies by type.
 status\\t\\t This plugin shows Pi-hole®'s blocking status.
 unique_domains\\t This plugin shows unique domains seen by Pi-hole®."
            ;;
            "PROXY_CONFIG_DIR"                              )
                some "PROXY_CONFIG_DIR: ${proxy_config_dir}"
            ;;
            "SCRIPT_DIR"                                    )
                some "SCRIPT_DIR: ${script_dir}"
            ;;
            "SHOW_COLOR"                                    )
                some "SHOW_COLOR: ${show_color}"
            ;;
            "SKIP_DEPENDENCY_CHECK"                         )
                some "SKIP_DEPENDENCY_CHECK: ${skip_dependency_check}"
            ;;
            "UPDATE_SELF"                                   )
                some "UPDATE_SELF: ${update_self}"
            ;;
            "VERBOSITY_LEVEL"                               )
                some "VERBOSITY_LEVEL: ${verbosity_level}"
            ;;
            ""                                              )
                min_height="31"
                if [[ -f "${script_dir}/munin-pihole-plugins" ]]; then
                    usage_text="Usage: munin-pihole-plugins $1 [VARIABLE [\"VALUE\"]]"
                    example_text="\\nExample: munin-pihole-plugins $1 DNS_SERVER 127.0.0.1"
                else
                    usage_text="Usage: export VARIABLE=\"VALUE\""
                    example_text="\\nExample: export DNS_SERVER=\"127.0.0.1\""
                fi
                some "${usage_text}
\\nVariable
 BRANCH=\"${branch}\"
 DNS_PORT=\"${dns_port}\"
 DNS_SERVER=\"${dns_server}\"
 EXTERNAL_CONFIG_DIR=\"${external_config_dir}\"
 EXTERNAL_CONFIG_FILE=\"${external_config_file}\"
 HOLD_DURATION=\"${hold_duration}\"
 IGNORE_PIHOLE_ON_HOST=\"${ignore_pihole_on_host}\"
 INSTALL_PLUGINS=\"${install_plugins}\"
 INSTALL_SCRIPT=\"${install_script}\"
 INSTALL_WEBSERVER=\"${install_webserver}\"
 LIGHTTPD_WEBROOT=\"${lighttpd_webroot}\"
 MUNIN_DIR=\"${munin_dir}\"
 MUNIN_CONFIG_DIR=\"${munin_config_dir}\"
 MUNIN_PLUGIN_DIR=\"${munin_plugin_dir}\"
 MUNIN_VERSION=\"${munin_version}\"
 NODE_PLUGIN_DIR=\"${node_plugin_dir}\"
 PLUGIN_CONFIG_DIR=\"${plugin_config_dir}\"
 PLUGIN_LIST=\"${plugin_list}\"
 PROXY_CONFIG_DIR=\"${proxy_config_dir}\"
 SCRIPT_DIR=\"${script_dir}\"
 SHOW_COLOR=\"${show_color}\"
 SKIP_DEPENDENCY_CHECK=\"${skip_dependency_check}\"
 UPDATE_SELF=\"${update_self}\"
 VERBOSITY_LEVEL=\"${verbosity_level}\"
${example_text}"
           ;;
            *                                               )
                some "munin-pihole-plugins: unrecognized variable '$2'
Type \"munin-pihole-plugins --configure\" for a list of available options"
        esac
    fi
}

# display the munin-pihole-plugins script help text
# its sprawling nature is actually a good thing i guess
# interactive help is always better than a giant wall of text
help_function() {
    case "${2}" in
        "-c" | "--configure" | "configure"                  )
            min_height="23"
            some "Usage: munin-pihole-plugins {$2 [VARIABLE [VALUE]]}
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -c, configure\\t --configure\\t\\t Display or set environment variables
\\nDisplay a full list of environment variables used by the munin-pihole-plugins
script, and their current values. These variables and this command can be used
to customize various aspects of the munin-pihole-plugins script's operation.
\\nTakes an optional parameter in the form of a munin-pihole-plugins environment
variable to list the value of that variable alone.
\\nExample: 'munin-pihole-plugins $2 INSTALL_PLUGINS'
\\nTakes an optional value for a munin-pihole-plugins environment variable to
set the value of that variable. If the optional value passed is 'RESET', the
corresponding environment variable will be reset to its default value. This
functionality is only available if the munin-pihole-plugins script is found to
exist within SCRIPT_DIR
\\nExamples: 'munin-pihole-plugins $2 DNS_SERVER 127.0.0.1'
          'munin-pihole-plugins $2 DNS_SERVER RESET'"
        ;;
        "-h" | "--help" | "help"                            )
            min_height="7"
            some "Usage: munin-pihole-plugins $2
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -h, help\\t --help\\t\\t\\t Display this help dialogue
\\nDisplay munin-pihole-plugins help information."
        ;;
        "-i" | "--install" | "install"                      )
            case "${3}" in
                "-p" | "-s" | "-w" | "plugins" | "script" | "webserver" | "--plugins" | "--script" | "--webserver"                                  )
                    min_height="12"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nParameter\\t\\t\\t\\tFunction
 -p, plugins\\t    --plugins\\t\\t Install and configure munin-node, and
\\t\\t\\t\\t\\t munin-pihole-plugins plugins
 -s, script\\t    --script\\t\\t Install the munin-pihole-plugins
\\t\\t\\t\\t\\t script
 -w, webserver\\t    --webserver\\t\\t Install and configure munin, lighttpd
\\t\\t\\t\\t\\t and lighttpd-external-munin-proxy
\\nExample: 'munin-pihole-plugins $2 $3'"
                ;;
                "-P" | "-S" | "-W" | "plugins-only" | "script-only" | "webserver-only" | "--plugins-only" | "--script-only" | "--webserver-only"    )
                    min_height="11"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nParameter\\t\\t\\t\\tFunction
 -P, plugins-only   --plugins-only\\t Install munin-pihole-plugins
\\t\\t\\t\\t\\t plugins
 -S, script-only    --script-only\\t Install the munin-pihole-plugins
\\t\\t\\t\\t\\t script
 -W, webserver-only --webserver-only\\t Install lighttpd-external-munin-proxy
\\nExample: 'munin-pihole-plugins $2 $3'"
                ;;
                *                                           )
                    min_height="32"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nOption\\t\\t    GNU long option\\tMeaning
 -i, install\\t     --install\\t\\t Install munin-pihole-plugins
\\nInstall and configure Munin monitoring server software (default: true), client
software (default: true), selected munin-pihole-plugins plugins (default: all)
and install a copy of the munin-pihole-plugins script (default: true) to a
selected directory (default: /usr/local/bin).
\\nThe munin-pihole-plugins script will self update (default: true) before install
if a newer version of the munin-pihole-plugins script is available.
\\nYou can run the installation again at any time afterwards to update the
munin-pihole-plugins script and plugins, optionally selecting which plugins to
install using the PLUGIN_LIST variable.
\\nTakes an optional parameter to install just that component.
\\nParameter\\t\\t\\t\\tFunction
 -p, plugins\\t    --plugins\\t\\t Install and configure munin-node, and
\\t\\t\\t\\t\\t munin-pihole-plugins plugins
 -P, plugins-only   --plugins-only\\t As above, skipping dependency check
 -s, script\\t    --script\\t\\t Install the munin-pihole-plugins
\\t\\t\\t\\t\\t script
 -S, script-only    --script-only\\t As above, skipping dependency check
 -w, webserver\\t    --webserver\\t\\t Install and configure munin, lighttpd
\\t\\t\\t\\t\\t and lighttpd-external-munin-proxy
 -W, webserver-only --webserver-only\\t As above, skipping dependency check
\\nExample: 'munin-pihole-plugins $2 plugins'"
                ;;
            esac
        ;;
        "-s" | "show" | "--show"                            )
            min_height="4"
            case "${3}" in
                "-c" | "conditions" | "--conditions"        )
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nExample: 'munin-pihole-plugins $2 --conditions'"
                ;;
                "-l" | "liability" | "--liability"          )
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nExample: 'munin-pihole-plugins $2 --liability'"
                ;;
                "-w" | "warranty" | "--warranty"            )
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nExample: 'munin-pihole-plugins $2 --warranty'"
                ;;
                *                                           )
                    min_height="9"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nOption\\t\\t    GNU long option\\tMeaning
 -c, conditions\\t     --conditions\\t Show GNU GPLv3 licensing conditions
 -l, liability\\t     --liability\\t Show liability definition
 -w, warranty\\t     --warranty\\t\\t Show warranty information
\\nExample: 'munin-pihole-plugins $2 warranty'"
                ;;
            esac
        ;;
        "-u" | "--uninstall" | "uninstall"                  )
            case "${3}" in
                "-p" | "-s" | "-w" | "plugins" | "script" | "webserver" | "--plugins" | "--script" | "--webserver"                                  )
                    min_height="12"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nParameter\\t\\t\\t\\tFunction
 -p, plugins\\t    --plugins\\t\\t Uninstall muninin-pihole-plugins
\\t\\t\\t\\t\\t plugins
 -s, script\\t    --script\\t\\t Uninstall the munin-pihole-plugins
\\t\\t\\t\\t\\t script
 -w, webserver\\t    --webserver\\t\\t Uninstall munin, lighttpd, and
\\t\\t\\t\\t\\t lighttpd-external-munin-proxy
\\nExample: 'munin-pihole-plugins $2 $3'"
                ;;
                "-P" | "-S" | "-W" | "plugins-only" | "script-only" | "webserver-only" | "--plugins-only" | "--script-only" | "--webserver-only"    )
                    min_height="11"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nParameter\\t\\t\\t\\tFunction
 -P, plugins-only   --plugins-only\\t Uninstall munin-pihole-plugins
\\t\\t\\t\\t\\t plugins
 -S, script-only    --script-only\\t Uninstall the munin-pihole-plugins
\\t\\t\\t\\t\\t script
 -W, webserver-only --webserver-only\\t Uninstall lighttpd-external-munin-proxy
\\nExample: 'munin-pihole-plugins $2 $3'"
                ;;
                *                                           )
                    min_height="23"
                    some "Usage: munin-pihole-plugins {$2 [PARAMETER]}
\\nOption\\t\\t    GNU long option\\tMeaning
 -u, uninstall\\t     --uninstall\\t Uninstall munin-pihole-plugins
\\nCompletely uninstall munin-pihole-plugins, you will be asked if you want to
uninstall any dependencies that munin-pihole-plugins may have installed.
\\nTakes an optional parameter to uninstall just that component.
\\nParameter\\t\\t\\t\\tFunction
 -p, plugins\\t    --plugins\\t\\t Uninstall munin-node, and
\\t\\t\\t\\t\\t munin-pihole-plugins plugins
 -P, plugins-only   --plugins-only\\t As above, skipping dependency removal
 -s, script\\t    --script\\t\\t Uninstall the munin-pihole-plugins
\\t\\t\\t\\t\\t script
 -S, script-only    --script-only\\t As above, skipping dependency removal
 -w, webserver\\t    --webserver\\t\\t Uninstall munin, lighttpd, and
\\t\\t\\t\\t\\t lighttpd-external-munin-proxy
 -W, webserver-only --webserver-only\\t As above, skipping dependency removal
\\nExample: 'munin-pihole-plugins $2 script-only'"
                ;;
            esac
        ;;
        "-v" | "--version" | "version"                      )
            min_height="10"
            some "Usage: munin-pihole-plugins {$2}
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -v, version\\t --version\\t\\t Display current and latest versions
\\nDisplay the current munin-pihole-plugins script version, and compare it to
the latest munin-pihole-plugins script version.
\\nAn additional notification will be displayed if an update is available."
        ;;
        ""                                                  )
            min_height="14"
            some "Usage: munin-pihole-plugins {OPTION [PARAMETER]}
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -c, configure\\t --configure\\t\\t Display or set environment variables
 -h, help\\t --help\\t\\t\\t Display this help dialogue
 -i, install\\t --install\\t\\t Install munin-pihole-plugins
 -s, show\\t --show\\t\\t\\t Display GNU GPLv3 license information
 -u, uninstall\\t --uninstall\\t\\t Uninstall munin-pihole-plugins
 -v, version\\t --version\\t\\t Display current and latest versions
\\nType \"$1 {OPTION}\" for more detailed explanations of each command
\\nExample: 'munin-pihole-plugins $1 install'"
        ;;
        *                                                   )
        min_height="3"
    some "munin-pihole-plugins: unrecognized option '$2'
Type \"munin-pihole-plugins --help\" for a list of available options"
        ;;
    esac
}

# primary installation function, installation exceptions are handled here
install_function() {
    case "${2}" in
        "-p" | "plugins" | "--plugins"                      )
             exec env INSTALL_SCRIPT="false" INSTALL_WEBSERVER="false" /bin/bash "$0" "$1"
        ;;
        "-P" | "plugins-only" | "--plugins-only"            )
             exec env INSTALL_SCRIPT="false" INSTALL_WEBSERVER="false" SKIP_DEPENDENCY_CHECK="true" /bin/bash "$0" "$1"
        ;;
        "-s" | "script" | "--script"                        )
             exec env INSTALL_PLUGINS="false" INSTALL_WEBSERVER="false" /bin/bash "$0" "$1"
        ;;
        "-S" | "script-only" | "--script-only"              )
             exec env INSTALL_PLUGINS="false" INSTALL_WEBSERVER="false" SKIP_DEPENDENCY_CHECK="true" /bin/bash "$0" "$1"
        ;;
        "-w" | "webserver" | "--webserver"                  )
             exec env INSTALL_PLUGINS="false" INSTALL_SCRIPT="false" /bin/bash "$0" "$1"
        ;;
        "-W" | "webserver-only" | "--webserver-only"        )
             exec env INSTALL_PLUGINS="false" INSTALL_SCRIPT="false" SKIP_DEPENDENCY_CHECK="true" /bin/bash "$0" "$1"
        ;;
        *                                                   )
            if [[ ! "${install_plugins}" == "true" ]] && [[ ! "${install_script}" == "true" ]] && [[ ! "${install_webserver}" == "true" ]]; then
                reverberate "error" "No action(s) to perform"
                reverberate "info" "At least one INSTALL_* variable must be \"true\""
                reverberate "exit"
                exit 1
            fi
            check_privilege "$@"
            check_version
            if [[ "${update_self}" == "true" ]]; then
                if [[ -f "${temp_dir}/.munin-pihole-plugins_update" ]]; then
                    rm "${temp_dir}/.munin-pihole-plugins_update" || return
                fi
                if [[ "${remote_version}" != "${VERSION}" ]]; then
                    obnoxious_header
                    update_script "$@"
                fi
            fi
            obnoxious_header
            gnugpl_info_function
            if [[ "${skip_dependency_check}" == "false" ]]; then
                install_dependencies
            else
                reverberate "info" "Skipping dependency checks"
            fi
            if [[ "${install_plugins}" == "true" ]]; then
                if [[ -n "${plugin_list}" ]]; then
                    check_pihole
                    uninstall_plugins
                    install_plugins
                    configure_plugins
                else
                    reverberate "error" "No action(s) to perform"
                    reverberate "info" "No plugins in PLUGIN_LIST"
                    reverberate "exit"
                    exit 1
                fi
            else
                reverberate "info" "Skipping plugin installation"
            fi
            if [[ "${install_webserver}" == "true" ]]; then
                if [[ "${munin_version}" == "stable" ]]; then
                    configure_munin
                fi
                configure_proxy
            else
                reverberate "info" "Skipping webserver installation"
            fi
            restart_services
            if [[ "${install_script}" == "true" ]]; then
                install_script
            else
                reverberate "info" "Skipping script installation"
            fi
            reverberate "footer"
        ;;
    esac
}

# GNU GPL v3 license magic for the sake of completion
# spits out some boilerplate that's technically required
# (and a little that isn't {-l,liability,--liability})
gnugpl_info_function() {
    case "${2}" in
        "-c" | "conditions" | "--conditions"                )
            min_height="14"
            some "munin-pihole-plugins saint-lascivious (Hayden Pearce) ©2022
\\n  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
\\n  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
\\nContact: munin-pihole-plugins@sainternet.xyz"
        ;;
        "-l" | "liability" | "--liability"                  )
            min_height="14"
            some "munin-pihole-plugins saint-lascivious (Hayden Pearce) ©2022
\\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
  THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
  GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
  USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
  DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
  PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
  EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGES.
\\nContact: munin-pihole-plugins@sainternet.xyz"
        ;;
        "-w" | "warranty" | "--warranty"                    )
            min_height="13"
            some "munin-pihole-plugins saint-lascivious (Hayden Pearce) ©2022
\\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
  APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
  HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY
  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
  IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
  ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
\\nContact: munin-pihole-plugins@sainternet.xyz"
        ;;
        ""                                                  )
            if [[ "${verbosity_level}" -ge "1" ]]; then
                if [[ -f "${script_dir}/munin-pihole-plugins" ]]; then
                    example_prefix="munin-pihole-plugins"
                else
                    example_prefix="./munin-pihole-plugins"
                fi
                min_height="9"
                some "\\n  This program comes with ${RED}ABSOLUTELY NO WARRANTY${RESET}; for details type
  \"${example_prefix} --show --warranty\"
\\n  This is ${GREEN}FREE SOFTWARE${RESET}, and you are welcome to redistribute it
  under certain conditions; for details type
  \"${example_prefix} --show --conditions\""
            fi
        ;;
        *                                                   )
            min_height="3"
            some "munin-pihole-plugins: unrecognized option '$2'
  Type \"munin-pihole-plugins --help --show\" for a list of available options"
        ;;
    esac
}

# uninstall munin-pihole-plugins
# removes all munin plugins and related configuration placed by
# munin-pihole-plugins and then prompts to remove any dependencies that may
# have been installed by munin-pihole-plugins (since we don't track what we
# did install if anything)
# places a blank external.conf file for lighttpd if we can't restore a backup
# because apparently it will pitch a fit if external.conf doesn't exist
uninstall_function() {
    case "${2}" in
        "-p" | "plugins" | "--plugins"                      )
             exec env INSTALL_SCRIPT="false" INSTALL_WEBSERVER="false" /bin/bash "$0" "$1"
        ;;
        "-P" | "plugins-only" | "--plugins-only"            )
             exec env INSTALL_SCRIPT="false" INSTALL_WEBSERVER="false" SKIP_DEPENDENCY_CHECK="true" /bin/bash "$0" "$1"
        ;;
        "-s" | "script" | "--script"                        )
             exec env INSTALL_PLUGINS="false" INSTALL_WEBSERVER="false" /bin/bash "$0" "$1"
        ;;
        "-S" | "script-only" | "--script-only"              )
             exec env INSTALL_PLUGINS="false" INSTALL_WEBSERVER="false" SKIP_DEPENDENCY_CHECK="true" /bin/bash "$0" "$1"
        ;;
        "-w" | "webserver" | "--webserver"                  )
             exec env INSTALL_PLUGINS="false" INSTALL_SCRIPT="false" /bin/bash "$0" "$1"
        ;;
        "-W" | "webserver-only" | "--webserver-only"        )
             exec env INSTALL_PLUGINS="false" INSTALL_SCRIPT="false" SKIP_DEPENDENCY_CHECK="true" /bin/bash "$0" "$1"
        ;;
        *                                                   )
            if [[ ! "${install_plugins}" == "true" ]] && [[ ! "${install_script}" == "true" ]] && [[ ! "${install_webserver}" == "true" ]]; then
                reverberate "error" "No action(s) to perform"
                reverberate "info" "At least one INSTALL_* variable must be \"true\""
                reverberate "exit"
                exit 1
            fi
            check_privilege "$@"
            obnoxious_header
            gnugpl_info_function
            if [[ "${install_plugins}" == "true" ]]; then
                dependency_list+="munin-node "
                if [[ -d "${plugin_config_dir}" ]]; then
                    if [[ -f  "${plugin_config_dir}/pihole.conf" ]]; then
                        rm "${plugin_config_dir}/pihole.conf" || return
                    fi
                fi
                uninstall_plugins
            fi
            if [[ "${install_script}" == "true" ]]; then
                dependency_list+="wget "
            fi
            if [[ "${install_webserver}" == "true" ]]; then
                check_pihole
                if [[ "${pihole_on_host}" == "true" ]]; then
                    if [[ -d "${lighttpd_webroot}/pihole" ]]; then
                        dependency_list+="munin "
                    else
                        dependency_list+="${webserver_dependencies}"
                    fi
                else
                    dependency_list+="${webserver_dependencies}"
                fi
                if [[ -d "${proxy_config_dir}" ]]; then
                    if [[ -f "${proxy_config_dir}/external.conf.orig" ]]; then
                        mv "${proxy_config_dir}/external.conf.orig" "${proxy_config_dir}/external.conf" || return
                        reverberate "info" "Original lighttpd external.conf restored from backup"
                    else
                        if [[ -f "${proxy_config_dir}/external.conf" ]]; then
                            rm "${proxy_config_dir}/external.conf" || return
                            touch "${proxy_config_dir}/external.conf" || return
                        fi
                    fi
                fi
                if [[ -d "${munin_config_dir}" ]]; then
                    if [[ -f "${munin_config_dir}/99-graph-strategy.conf" ]]; then
                        rm "${munin_config_dir}/99-graph-strategy.conf" || return
                    fi
                else
                    if [[ -d "${munin_dir}" ]]; then
                        if [[ -f "${munin_dir}/munin.conf" ]]; then
                            sed -i "s/^html_strategy cli/#html_strategy cron/g" "${munin_dir}/munin.conf" || return
                            sed -i "s/^graph_strategy cli/#graph_strategy cron/g" "${munin_dir}/munin.conf" || return
                        fi
                    fi
                fi

            fi
            if [[ "${skip_dependency_check}" == "false" ]]; then
                if [[ -x "$(command -v dpkg-query)" ]]; then
                    if [[ -x "$(command -v apt)" ]]; then
                        for dependency_id in ${dependency_list}; do
                            package_query="$(dpkg-query -W --showformat='${Status}\n' "${dependency_id}" | grep "install ok installed")"
                            if [[ -n "${package_query}" ]]; then
                                reverberate "info" "${dependency_id} may have been installed by munin-pihole-plugins"
                                reverberate "question" "Would you like to uninstall ${dependency_id} now?"
                                if [[ "${dependency_id}" == "curl" ]] ||  [[ "${dependency_id}" == "init-system-helpers" ]] || [[ "${dependency_id}" == "wget" ]]; then
                                    reverberate "warning" "It probably wasn't, and you probably wouldn't"
                                fi
                                reverberate "info" "Uninstalling package ${dependency_id}"
                                if [[ "${verbosity_level}" -ge "2" ]]; then
                                    apt remove -q "${dependency_id}"
                                else
                                    apt remove -qq "${dependency_id}" > /dev/null 2>&1
                                fi
                                reverberate "success" "${dependency_id}"
                            fi
                        done
                    fi
                fi
            fi
            if [[ "${install_script}" == "true" ]]; then
                if [[ -d "${script_dir}" ]]; then
                    if [[ -f "${script_dir}/munin-pihole-plugins" ]]; then
                        uninstall_script
                    fi
                fi
            else
                reverberate "footer"
            fi
        ;;
    esac
}

# display the current and latest munin-pihole-plugins script versions
# since we can change branches on a whim, we can't always assume that the remote
# version will be greater than the current version, we only care if it differs
version_function() {
    check_version
    if [[ -n "${remote_version}" ]]; then
        if [[ "${remote_version}" != "${VERSION}" ]]; then
            min_height="4"
            some "  [${WHITE}ℹ${RESET}] ${GREEN}An update for munin-pihole-plugins is available${RESET}\\n
  munin-pihole-plugins version is v${RED}${VERSION}${RESET} (Latest: v${GREEN}${remote_version}${RESET})"
        else
            some "  [${WHITE}ℹ${RESET}] munin-pihole-plugins version is v${GREEN}${VERSION}${RESET} (Latest: v${GREEN}${remote_version}${RESET})"
        fi
    else
        min_height="5"
        some "  [${YELLOW}⚠${RESET}] ${YELLOW}Unable to locate TXT record for ${plugin_domain}${RESET}
  using the nameserver ${dns_server} on port ${dns_port}\\n
  munin-pihole-plugins version is v${VERSION} (Latest: ${RED}unknown${RESET})"
    fi
}

# function handler
# whinges about being run with no input
# whinges about being run with invalid input
function_handler() {
    case "${1}" in
        "-c" | "--configure" | "configure"                  )
            config_function "$@"
        ;;
        "-h" | "--help" | "help"                            )
            help_function "$@"
        ;;
        "-i" | "--install" | "install"                      )
            install_function "$@"
        ;;
        "-s" | "show" | "--show"                            )
            gnugpl_info_function "$@"
        ;;
        "-u" | "--uninstall" | "uninstall"                  )
            uninstall_function "$@"
        ;;
        "-v" | "--version" | "version"                      )
            version_function "$@"
        ;;
        ""                                                  )
            min_height="3"
    some "munin-pihole-plugins: no option selected
Type \"munin-pihole-plugins --help\" for a list of available options"
        ;;
        *                                                   )
            min_height="3"
    some "munin-pihole-plugins: unrecognized option '$1'
Type \"munin-pihole-plugins --help\" for a list of available options"
        ;;
    esac
}

function_handler "$@"
