#!/bin/sh

# munin-pihole-plugins - pihole_
# saint-lascivious (Hayden Pearce) Â©2022

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Contact: munin-pihole-plugins@sainternet.xyz

# munin-pihole-plugins version
# must follow 8 character major.minor.micro scheme
VERSION="08.04.09"

: <<=cut
=head1 NAME

pihole_ - Munin plugins for monitoring various Pi-hole statistics.

=head1 VERSION

${VERSION}

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf,suggest

=head1 LICENSE

GNU GPLv3

=head1 APPLICABLE SYSTEMS

Systems with a default Pi-hole installation. If the Pi-hole install
is non-standard or located on another host, additional configuration
will be required.

=head1 PLUGINS

The monolithic plugin can display various different graphs depending on the munin-pihole-plugin plugin's basename or symbolic link names.

Plugin name:             Plugin description
 pihole_blocked          - Shows the number of domains blocked by Pi-hole.
 pihole_cache            - Shows Pi-hole's cache.
 pihole_cache_by_type    - Shows Pi-hole's cache by type.
 pihole_clients          - Shows clients seen by Pi-hole.
 pihole_debug            - Shows plugin debug information via commandline.
 pihole_percent          - Shows Pi-hole's blocked query percentage.
 pihole_queries          - Shows queries seen by Pi-hole.
 pihole_replies_by_type  - Shows Pi-hole replies by type.
 pihole_status           - Shows Pi-hole's blocking status.
 pihole_unique_domains   - Shows unique domains seen by Pi-hole.

Note for cache_* plugins:
Pi-hole API authentication required.
Either a Pi-hole setupVars.conf path or webpassword value must be supplied.

=head1 PLUGIN CONFIGURATION

[pihole_*]
    user root
    env.api /admin/api.php
    env.cachesuffix ?getCacheInfo&auth=
    env.ftl_portfile /run/pihole-FTL.port
    #env.ftlport 4711
    env.host 127.0.0.1
    env.port 80
    env.setupvars /etc/pihole/setupVars.conf
    #env.webpassword PIHOLE_SETUPVARS_WEBPASSWORD_HERE

    env.blocked_crit 1:5000000
    env.blocked_warn 0:3000000
    env.cache_crit
    env.cache_warn
    env.cache_by_type_crit
    env.cache_by_type_warn
    env.clients_crit 100
    env.clients_warn 1:50
    env.percent_crit 95
    env.percent_warn 1:85
    env.queries_crit
    env.queries_warn
    env.replies_by_type_crit
    env.replies_by_type_warn
    env.status_crit 0:1
    env.status_warn 1:
    env.unique_domains_crit 1:20000
    env.unique_domains_warn 0:10000

Define relevant env.* variables to override the default values to suit your requirement.

=head1 AUTHOR

Copyright saint-lascivious (Hayden Pearce) 2022

=cut

#%# family=auto
#%# capabilities=autoconf suggest

api="${api:-/admin/api.php}"
blocked_crit="${blocked_crit:-1:5000000}"
blocked_warn="${blocked_warn:-0:3000000}"
cache_by_type_crit="${cache_by_type_crit:-}"
cache_by_type_warn="${cache_by_type_warn:-}"
cache_crit="${cache_crit:-}"
cachesuffix="${cachesuffix:-?getCacheInfo&auth=}"
cache_warn="${cache_warn:-}"
clients_crit="${clients_crit:-100}"
clients_warn="${clients_warn:-1:50}"
ftl_portfile="${ftl_portfile:-/run/pihole-FTL.port}"
if [ -f "${ftl_portfile}" ]; then
    get_ftlport="$(cat < "${ftl_portfile}")"
    ftlport="${ftlport:-${get_ftlport}}"
else
    ftlport="${ftlport:-}"
fi
host="${host:-127.0.0.1}"
percent_crit="${percent_crit:-98}"
percent_warn="${percent_warn:-1:85}"
plugin_id="$(echo "$0" | sed -e 's/^.*pihole_//')"
port="${port:-80}"
queries_crit="${queries_crit:-}"
queries_warn="${queries_warn:-}"
replies_by_type_crit="${replies_by_type_crit:-}"
replies_by_type_warn="${replies_by_type_warn:-}"
setupvars="${setupvars:-/etc/pihole/setupVars.conf}"
status_crit="${status_crit:-0:1}"
status_warn="${status_warn:-1:}"
unique_domains_crit="${unique_domains_crit:-1:20000}"
unique_domains_warn="${unique_domains_warn:-0:10000}"
if [ -f "${setupvars}" ]; then
    get_webpassword="$(cat < "${setupvars}" | grep WEBPASSWORD | sed s/WEBPASSWORD=//g)"
    webpassword="${webpassword:-${get_webpassword}}"
else
    webpassword="${webpassword:-}"
fi

if [ "${host}" = "127.0.0.1" ] && [ -n "${ftlport}" ]; then
    api_method="telnet"
    case ${plugin_id} in
        "cache" | "cache_by_type")
            get_stats="$(echo ">cacheinfo >quit" | nc "${host}" "${ftlport}" 2>/dev/null | sed 's/ /:/' | sort -u)"
        ;;
        *)
            get_stats="$(echo ">stats >quit" | nc "${host}" "${ftlport}" 2>/dev/null | sed 's/ /:/' | sort -u)"
        ;;
    esac
else
    api_method="json"
    case ${plugin_id} in
        "cache" | "cache_by_type")
            get_stats="$(echo "curl -sL ${host}:${port}${api}${cachesuffix}${webpassword} 2>/dev/null" | sed 's/[{}"]//g; s/cacheinfo://' | tr "," "\\n" | sort -u)"
        ;;
        *)
            get_stats="$(echo "curl -sL ${host}:${port}${api} 2>/dev/null" | sed 's/[{}"]//g' | tr "," "\\n" | sort -u)"
        ;;
    esac
fi

if [ "$1" = "autoconf" ]; then
    if [ "${host}" = "127.0.0.1" ] && [ -n "${ftlport}" ]; then
        if [ ! -x "$(command -v "nc")" ]; then
            echo "no (nc does not exist)"
            exit 0
        fi
        echo "yes"
        exit 0
    else
        if [ ! -x "$(command -v "curl")" ]; then
            echo "no (curl does not exist)"
            exit 0
        fi
        if [ ! -f "${setupvars}" ]; then
            echo "no (${setupvars} does not exist)"
            exit 0
        fi
        echo yes
        exit 0
    fi
fi

if [ "$1" = "suggest" ]; then
    echo "blocked"
    echo "cache"
    echo "cache_by_type"
    echo "clients"
    echo "percent"
    echo "queries"
    echo "replies_by_type"
    echo "status"
    echo "unique_domains"
    exit 0
fi

if [ -z "${plugin_id}" ]; then
    plugin_id="percent"
fi

plugin_config() {
    case ${plugin_id} in
        "blocked")
            echo "graph_title Pi-hole domains being blocked"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel domains being blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows the number of domains blocked by Pi-hole."
            echo "update_rate 3600"
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "domains_being_blocked" ]; then
                    echo "${stat}.critical ${blocked_crit}"
                    echo "${stat}.label domains being blocked"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${blocked_warn}"
                fi
            done
        ;;
        "cache")
            echo "graph_title Pi-hole cache"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel cache packets"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's cache."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "cache-live-freed" ] || [ "${stat}" = "cache-inserted" ] || [ "${stat}" = "expired" ] || [ "${stat}" = "immortal" ]; then
                    echo "${stat}.critical ${cache_crit}"
                    echo "${stat}.label $(echo "${stat}" | sed 's/-/ /g')"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${cache_warn}"
                fi
            done
        ;;
        "cache_by_type")
            echo "graph_title Pi-hole cache by type"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel cache packets"
            echo "graph_total total"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's cache by type."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ipv4" ] || [ "${stat}" = "ipv6" ] || [ "${stat}" = "srv" ] || [ "${stat}" = "cname" ] || [ "${stat}" = "ds" ] || [ "${stat}" = "dnskey" ] || [ "${stat}" = "other" ]; then
                    echo "${stat}.critical ${cache_by_type_crit}"
                    echo "${stat}.label $(echo "${stat}" | sed 's/ipv4/A/; s/ipv6/AAAA/; s/srv/SRV/; s/cname/CNAME/; s/ds/DS/; s/dnskey/DNSKEY/')"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${cache_by_type_warn}"
                fi
            done
        ;;
        "clients")
            echo "graph_title Pi-hole clients"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel number of clients"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows clients seen by Pi-hole."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "clients_ever_seen" ] || [ "${stat}" = "unique_clients" ]; then
                    echo "${stat}.critical ${clients_crit}"
                    echo "${stat}.label $(echo "${stat}" | sed 's/_/ /g')"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${clients_warn}"
                fi
            done
        ;;
        "percent")
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_args --base 1000 -l 0 -u 100"
            echo "graph_vlabel percent blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    echo "${stat}.critical ${percent_crit}"
                    echo "${stat}.label percentage blocked"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.max 100"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${percent_warn}"
                fi
            done
        ;;
        "queries")
            echo "graph_title Pi-hole queries"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel queries"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows queries seen by Pi-hole."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "dns_queries_today" ] || [ "${stat}" = "ads_blocked_today" ] || [ "${stat}" = "queries_forwarded" ] || [ "${stat}" = "queries_cached" ]; then
                    echo "${stat}.critical ${queries_crit}"
                    echo "${stat}.label $(echo "${stat}" | sed 's/dns_queries_today/queries/; s/ads_blocked_today/blocked queries/; s/queries_//')"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${queries_warn}"
                fi
            done
        ;;
        "replies_by_type")
            echo "graph_title Pi-hole replies by type"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel answer packets"
            echo "graph_total total"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole replies by type."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "reply_UNKNOWN" ] || [ "${stat}" = "reply_NODATA" ] || [ "${stat}" = "reply_NXDOMAIN" ] || [ "${stat}" = "reply_CNAME" ] || [ "${stat}" = "reply_IP" ] || [ "${stat}" = "reply_DOMAIN" ] || [ "${stat}" = "reply_RRNAME" ] || [ "${stat}" = "reply_SERVFAIL" ] || [ "${stat}" = "reply_REFUSED" ] || [ "${stat}" = "reply_NOTIMP" ] || [ "${stat}" = "reply_OTHER" ] || [ "${stat}" = "reply_DNSSEC" ] || [ "${stat}" = "reply_NONE" ] || [ "${stat}" = "reply_BLOB" ]; then
                    echo "${stat}.critical ${replies_by_type_crit}"
                    echo "${stat}.label $(echo "${stat}" | sed 's/reply_//')"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${replies_by_type_warn}"
                fi
            done
        ;;
        "status")
            echo "graph_title Pi-hole blocking status"
            echo "graph_args --base 1000 -l -1 -u 1"
            echo "graph_vlabel unknown / disabled / enabled"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocking status."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "status" ]; then
                    echo "${stat}.critical ${status_crit}"
                    echo "${stat}.label blocking status"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.max 1"
                    echo "${stat}.min -1"
                    echo "${stat}.warning ${status_warn}"
                fi
            done
        ;;
        "unique_domains")
            echo "graph_title Pi-hole unique domains"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel unique domains"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows the unique domains seen by Pi-hole."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_domains" ]; then
                    echo "${stat}.critical ${unique_domains_crit}"
                    echo "${stat}.label unique domains"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${unique_domains_warn}"
                fi
            done
        ;;
        *)
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_args --base 1000 -l 0 -u 100"
            echo "graph_vlabel percent blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    echo "${stat}.critical ${percent_crit}"
                    echo "${stat}.label percentage blocked"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.max 100"
                    echo "${stat}.min 0"
                    echo "${stat}.warning ${percent_warn}"
                fi
            done
        ;;
    esac
}

plugin_data() {
    # shellcheck disable=SC2154
    case ${plugin_id} in
        "blocked")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "domains_being_blocked" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "cache")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "cache-live-freed" ] || [ "${stat}" = "cache-inserted" ] || [ "${stat}" = "expired" ] || [ "${stat}" = "immortal" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "cache_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ipv4" ] || [ "${stat}" = "ipv6" ] || [ "${stat}" = "srv" ] || [ "${stat}" = "cname" ] || [ "${stat}" = "ds" ] || [ "${stat}" = "dnskey" ] || [ "${stat}" = "other" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "clients")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_clients" ] || [ "${stat}" = "clients_ever_seen" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "debug")
            echo "plugin variables:"
            echo "api=\"${api}\""
            echo "cachesuffix=\"${cachesuffix}\""
            echo "ftl_portfile=\"${ftl_portfile}\""
            if [ -f "${ftl_portfile}" ]; then
                echo "\"${ftl_portfile}\" exists"
            else
                echo "\"${ftl_portfile}\" does not exist"
            fi
            echo "ftlport=\"${ftlport}\""
            echo "host=\"${host}\""
            echo "port=\"${port}\""
            echo "setupvars=\"${setupvars}\""
            if [ -f "${setupvars}" ]; then
                echo "\"${setupvars}\" exists"
            else
                echo "\"${setupvars}\" does not exist"
            fi
            echo "webpassword=\"${webpassword}\""
            echo "blocked_crit=\"${blocked_crit}\""
            echo "blocked_warn=\"${blocked_warn}\""
            echo "cache_crit=\"${cache_crit}\""
            echo "cache_warn=\"${cache_warn}\""
            echo "cache_by_type_crit=\"${cache_by_type_crit}\""
            echo "cache_by_type_warn=\"${cache_by_type_warn}\""
            echo "clients_crit=\"${clients_crit}\""
            echo "clients_warn=\"${clients_warn}\""
            echo "percent_crit=\"${percent_crit}\""
            echo "percent_warn=\"${percent_warn}\""
            echo "queries_crit=\"${queries_crit}\""
            echo "queries_warn=\"${queries_warn}\""
            echo "replies_by_type_crit=\"${replies_by_type_crit}\""
            echo "replies_by_type_warn=\"${replies_by_type_warn}\""
            echo "status_crit=\"${status_crit}\""
            echo "status_warn=\"${status_warn}\""
            echo "unique_domains_crit=\"${unique_domains_crit}\""
            echo "unique_domains_warn=\"${unique_domains_warn}\""
            echo "plugin commands:"
            if [ -x "$(command -v "nc")" ]; then
                echo "\"nc\" exists"
            else
                echo "\"nc\" does not exist"
            fi
            if [ -x "$(command -v "curl")" ]; then
                echo "\"curl\" exists"
            else
                echo "\"curl\" does not exist"
            fi
            echo "plugin capabilities:"
            if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
                echo "dirtyconf capability supported"
            else
                echo "dirtyconf capability unsupported"
            fi
            echo "api method:"
            echo "${api_method}"
        ;;
        "percent")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "queries")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "dns_queries_today" ] || [ "${stat}" = "ads_blocked_today" ] || [ "${stat}" = "queries_forwarded" ] || [ "${stat}" = "queries_cached" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "replies_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "reply_UNKNOWN" ] || [ "${stat}" = "reply_NODATA" ] || [ "${stat}" = "reply_NXDOMAIN" ] || [ "${stat}" = "reply_CNAME" ] || [ "${stat}" = "reply_IP" ] || [ "${stat}" = "reply_DOMAIN" ] || [ "${stat}" = "reply_RRNAME" ] || [ "${stat}" = "reply_SERVFAIL" ] || [ "${stat}" = "reply_REFUSED" ] || [ "${stat}" = "reply_NOTIMP" ] || [ "${stat}" = "reply_OTHER" ] || [ "${stat}" = "reply_DNSSEC" ] || [ "${stat}" = "reply_NONE" ] || [ "${stat}" = "reply_BLOB" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "status")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "status" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    if [ "${value}" = "enabled" ]; then
                        echo "${stat}.value 1"
                    else
                        if [ "${value}" = "disabled" ]; then
                            echo "${stat}.value 0"
                        else
                            echo "${stat}.value -1"
                        fi
                    fi
                fi
            done
        ;;
        "unique_domains")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_domains" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        *)
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
    esac
}

case $1 in
    "config")
        # shellcheck disable=SC2154
        plugin_config
        if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
            plugin_data
        fi
        exit 0
    ;;
    *)
        plugin_data
        exit 0
    ;;
esac
