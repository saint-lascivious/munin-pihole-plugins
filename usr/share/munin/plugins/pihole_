#!/bin/sh

# munin-pihole-plugins - pihole_
# saint-lascivious (Hayden Pearce) Â©2022

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Contact: munin-pihole-plugins@sainternet.xyz

# munin-pihole-plugins version
# must follow 8 character major.minor.micro scheme
VERSION="08.10.00"

: <<=cut
=head1 NAME

pihole_ - Munin plugins for monitoring various Pi-hole statistics.

=head1 VERSION

${VERSION}

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf,suggest

=head1 LICENSE

GNU GPLv3

=head1 APPLICABLE SYSTEMS

Systems with a default Pi-hole installation. If the Pi-hole install
is non-standard or located on another host, additional configuration
will be required.

=head1 PLUGINS

The monolithic plugin can display various different graphs depending on the munin-pihole-plugin plugin's basename or symbolic link names.

Plugin name:             Plugin description
 pihole_blocked          - Shows the number of domains blocked by Pi-hole.
 pihole_cache            - Shows Pi-hole's cache.
 pihole_cache_by_type    - Shows Pi-hole's cache by type.
 pihole_clients          - Shows clients seen by Pi-hole.
 pihole_debug            - Shows plugin debug information via commandline.
 pihole_percent          - Shows Pi-hole's blocked query percentage.
 pihole_privacy          - Shows Pi-hole's privacy level.
 pihole_queries          - Shows queries seen by Pi-hole.
 pihole_replies_by_type  - Shows Pi-hole replies by type.
 pihole_status           - Shows Pi-hole's blocking status.
 pihole_unique_domains   - Shows unique domains seen by Pi-hole.

Note for cache_* plugins:
Pi-hole API authentication required.
Either a Pi-hole setupVars.conf path or webpassword value must be supplied.

=head1 PLUGIN CONFIGURATION

Default munin-pihole-plugins pihole_ plugin configuration (default: /etc/munin/plugin-conf.d/pihole.conf).

[pihole_*]
    user root
    env.api /admin/api.php
    env.cachesuffix ?getCacheInfo&auth=
    env.ftl_portfile /run/pihole-FTL.port
    #env.ftlport 4711
    env.host 127.0.0.1
    env.port 80
    env.setupvars /etc/pihole/setupVars.conf
    #env.webpassword PIHOLE_SETUPVARS_WEBPASSWORD_HERE

    env.domains_being_blocked_crit 1:5000000
    env.domains_being_blocked_warn 0:3000000
    #env.cache_live_freed_crit
    #env.cache_live_freed_warn
    #env.cache_inserted_crit
    #env.cache_inserted_warn
    #env.expired_crit
    #env.expired_warn
    #env.immortal_crit
    #env.immortal_warn
    #env.ipv4_crit
    #env.ipv4_warn
    #env.ipv6_crit
    #env.ipv6_warn
    #env.srv_crit
    #env.srv_warn
    #env.cname_crit
    #env.cname_warn
    #env.ds_crit
    #env.ds_warn
    #env.dnskey_crit
    #env.dnskey_warn
    #env.other_crit
    #env.other_warn
    #env.clients_ever_seen_crit
    #env.clients_ever_seen_warn
    env.unique_clients_crit 100
    env.unique_clients_warn 1:50
    env.ads_percentage_today_crit 98
    env.ads_percentage_today_warn 1:85
    #env.privacy_level_crit
    #env.privacy_level_warn
    #env.dns_queries_today_crit
    #env.dns_queries_today_warn
    #env.ads_blocked_today_crit
    #env.ads_blocked_today_warn
    #env.queries_forwarded_crit
    #env.queries_forwarded_warn
    #env.queries_cached_crit
    #env.queries_cached_warn
    #env.reply_UNKNOWN_crit
    #env.reply_UNKNOWN_warn
    #env.reply_NODATA_crit
    #env.reply_NODATA_warn
    #env.reply_NXDOMAIN_crit
    #env.reply_NXDOMAIN_warn
    #env.reply_CNAME_crit
    #env.reply_CNAME_warn
    #env.reply_IP_crit
    #env.reply_IP_warn
    #env.reply_DOMAIN_crit
    #env.reply_DOMAIN_warn
    #env.reply_RRNAME_crit
    #env.reply_RRNAME_warn
    #env.reply_SERVFAIL_crit
    #env.reply_SERVFAIL_warn
    #env.reply_REFUSED_crit
    #env.reply_REFUSED_warn
    #env.reply_NOTIMP_crit
    #env.reply_NOTIMP_warn
    #env.reply_OTHER_crit
    #env.reply_OTHER_warn
    #env.reply_DNSSEC_crit
    #env.reply_DNSSEC_warn
    #env.reply_NONE_crit
    #env.reply_NONE_warn
    #env.reply_BLOB_crit
    #env.reply_BLOB_warn
    #env.status_crit
    #env.status_warn
    env.unique_domains_crit 1:20000
    env.unique_domains_warn 0:10000

Uncomment and/or (re-)define relevant env.* variables to override the default values to suit your requirement.

The values for *_crit and *_warn can be a max value or a range separated by colon. E.g. "min:", ":max", "min:max", "max".

=head1 AUTHOR

Copyright saint-lascivious (Hayden Pearce) 2022

=cut

#%# family=auto
#%# capabilities=autoconf suggest

api="${api:-/admin/api.php}"
cachesuffix="${cachesuffix:-?getCacheInfo&auth=}"
ftl_portfile="${ftl_portfile:-/run/pihole-FTL.port}"
if [ -f "${ftl_portfile}" ]; then
    get_ftlport="$(cat < "${ftl_portfile}")"
    ftlport="${ftlport:-${get_ftlport}}"
else
    ftlport="${ftlport:-}"
fi
host="${host:-127.0.0.1}"
plugin_id="$(echo "$0" | sed -e 's/^.*pihole_//')"
port="${port:-80}"
setupvars="${setupvars:-/etc/pihole/setupVars.conf}"
if [ -f "${setupvars}" ]; then
    get_webpassword="$(cat < "${setupvars}" | grep WEBPASSWORD | sed s/WEBPASSWORD=//g)"
    webpassword="${webpassword:-${get_webpassword}}"
else
    webpassword="${webpassword:-}"
fi

domains_being_blocked_crit="${domains_being_blocked_crit:-1:5000000}"
domains_being_blocked_warn="${domains_being_blocked_warn:-0:3000000}"
cache_live_freed_crit="${cache_live_freed_crit:-}"
cache_live_freed_warn="${cache_live_freed_warn:-}"
cache_inserted_crit="${cache_inserted_crit:-}"
cache_inserted_warn="${cache_inserted_warn:-}"
expired_crit="${expired_crit:-}"
expired_warn="${expired_warn:-}"
immortal_crit="${immortal_crit:-}"
immortal_warn="${immortal_warn:-}"
ipv4_crit="${ipv4_crit:-}"
ipv4_warn="${ipv4_warn:-}"
ipv6_crit="${ipv6_crit:-}"
ipv6_warn="${ipv6_warn:-}"
srv_crit="${srv_crit:-}"
srv_warn="${srv_warn:-}"
cname_crit="${cname_crit:-}"
cname_warn="${cname_warn:-}"
ds_crit="${ds_crit:-}"
ds_warn="${ds_warn:-}"
dnskey_crit="${dnskey_crit:-}"
dnskey_warn="${dnskey_warn:-}"
other_crit="${other_crit:-}"
other_warn="${other_warn:-}"
clients_ever_seen_crit="${clients_ever_seen_crit:-}"
clients_ever_seen_warn="${clients_ever_seen_warn:-}"
unique_clients_crit="${unique_clients_crit:-100}"
unique_clients_warn="${unique_clients_warn:-1:50}"
ads_percentage_today_crit="${ads_percentage_today_crit:-98}"
ads_percentage_today_warn="${ads_percentage_today_warn:-1:85}"
privacy_level_crit="${privacy_level_crit:-}"
privacy_level_warn="${privacy_level_warn:-}"
dns_queries_today_crit="${dns_queries_today_crit:-}"
dns_queries_today_warn="${dns_queries_today_warn:-}"
ads_blocked_today_crit="${ads_blocked_today_crit:-}"
ads_blocked_today_warn="${ads_blocked_today_warn:-}"
queries_forwarded_crit="${queries_forwarded_crit:-}"
queries_forwarded_warn="${queries_forwarded_warn:-}"
queries_cached_crit="${queries_cached_crit:-}"
queries_cached_warn="${queries_cached_warn:-}"
reply_UNKNOWN_crit="${reply_UNKNOWN_crit:-}"
reply_UNKNOWN_warn="${reply_UNKNOWN_warn:-}"
reply_NODATA_crit="${reply_NODATA_crit:-}"
reply_NODATA_warn="${reply_NODATA_warn:-}"
reply_NXDOMAIN_crit="${reply_NXDOMAIN_crit:-}"
reply_NXDOMAIN_warn="${reply_NXDOMAIN_warn:-}"
reply_CNAME_crit="${reply_CNAME_crit:-}"
reply_CNAME_warn="${reply_CNAME_warn:-}"
reply_IP_crit="${reply_IP_crit:-}"
reply_IP_warn="${reply_IP_warn:-}"
reply_DOMAIN_crit="${reply_DOMAIN_crit:-}"
reply_DOMAIN_warn="${reply_DOMAIN_warn:-}"
reply_RRNAME_crit="${reply_RRNAME_crit:-}"
reply_RRNAME_warn="${reply_RRNAME_warn:-}"
reply_SERVFAIL_crit="${reply_SERVFAIL_crit:-}"
reply_SERVFAIL_warn="${reply_SERVFAIL_warn:-}"
reply_REFUSED_crit="${reply_REFUSED_crit:-}"
reply_REFUSED_warn="${reply_REFUSED_warn:-}"
reply_NOTIMP_crit="${reply_NOTIMP_crit:-}"
reply_NOTIMP_warn="${reply_NOTIMP_warn:-}"
reply_OTHER_crit="${reply_OTHER_crit:-}"
reply_OTHER_warn="${reply_OTHER_warn:-}"
reply_DNSSEC_crit="${reply_DNSSEC_crit:-}"
reply_DNSSEC_warn="${reply_DNSSEC_warn:-}"
reply_NONE_crit="${reply_NONE_crit:-}"
reply_NONE_warn="${reply_NONE_warn:-}"
reply_BLOB_crit="${reply_BLOB_crit:-}"
reply_BLOB_warn="${reply_BLOB_warn:-}"
status_crit="${status_crit:-0:1}"
status_warn="${status_warn:-1:}"
unique_domains_crit="${unique_domains_crit:-1:20000}"
unique_domains_warn="${unique_domains_warn:-0:10000}"

if [ -z "${plugin_id}" ]; then
    plugin_id="percent"
fi

if [ "${host}" = "127.0.0.1" ] || [ "${host}" = "::1" ] && [ -n "${ftlport}" ]; then
    api_method="telnet"
    case ${plugin_id} in
        "cache" | "cache_by_type")
            get_stats="$(echo ">cacheinfo >quit" | nc "${host}" "${ftlport}" 2>/dev/null | sed 's/ //' | sort -u)"
        ;;
        *)
            get_stats="$(echo ">stats >quit" | nc "${host}" "${ftlport}" 2>/dev/null | sed 's/ /:/' | sort -u)"
        ;;
    esac
else
    api_method="json"
    case ${plugin_id} in
        "cache" | "cache_by_type")
            get_stats="$(echo "curl -sL ${host}:${port}${api}${cachesuffix}${webpassword} 2>/dev/null" | sed 's/[{}"]//g; s/cacheinfo://' | tr "," "\\n" | sort -u)"
        ;;
        *)
            get_stats="$(echo "curl -sL ${host}:${port}${api} 2>/dev/null" | sed 's/[{}"]//g' | tr "," "\\n" | sort -u)"
        ;;
    esac
fi

plugin_autoconf() {
    if [ "${host}" = "127.0.0.1" ] || [ "${host}" = "::1" ] && [ -n "${ftlport}" ]; then
        if [ ! -x "$(command -v "nc")" ]; then
            echo "no (nc does not exist)"
            exit 0
        fi
        echo "yes"
        exit 0
    else
        if [ ! -x "$(command -v "curl")" ]; then
            echo "no (curl does not exist)"
            exit 0
        fi
        if [ ! -f "${setupvars}" ]; then
            echo "no (${setupvars} does not exist)"
            exit 0
        fi
        echo yes
        exit 0
    fi
}

plugin_config() {
    case ${plugin_id} in
        "blocked")
            echo "graph_title Pi-hole domains being blocked"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel domains being blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows the number of domains blocked by Pi-hole."
            echo "update_rate 3600"
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "domains_being_blocked" ]; then
                    echo "${stat}.critical ${domains_being_blocked_crit}"
                    echo "${stat}.label domains being blocked"
                    echo "${stat}.min 0"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.warning ${domains_being_blocked_warn}"
                fi
            done
        ;;
        "cache")
            echo "graph_title Pi-hole cache"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel cache packets"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's cache."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "cache-live-freed")
                        echo "${stat}.critical ${cache_live_freed_crit}"
                        echo "${stat}.label cache live freed"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${cache_live_freed_warn}"
                    ;;
                    "cache-inserted")
                        echo "${stat}.critical ${cache_inserted_crit}"
                        echo "${stat}.label cache inserted"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${cache_inserted_warn}"
                    ;;
                    "expired")
                        echo "${stat}.critical ${expired_crit}"
                        echo "${stat}.label expired"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${expired_warn}"
                    ;;
                    "immortal")
                        echo "${stat}.critical ${immortal_crit}"
                        echo "${stat}.label immortal"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${immortal_warn}"
                    ;;
                esac
            done
        ;;
        "cache_by_type")
            echo "graph_title Pi-hole cache by type"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel cache packets"
            echo "graph_total total"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's cache by type."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "ipv4")
                        echo "${stat}.critical ${ipv4_crit}"
                        echo "${stat}.label A"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${ipv4_warn}"
                    ;;
                    "ipv6")
                        echo "${stat}.critical ${ipv6_crit}"
                        echo "${stat}.label AAAA"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${ipv6_warn}"
                    ;;
                    "srv")
                        echo "${stat}.critical ${srv_crit}"
                        echo "${stat}.label SRV"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${srv_warn}"
                    ;;
                    "cname")
                        echo "${stat}.critical ${cname_crit}"
                        echo "${stat}.label CNAME"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${cname_warn}"
                    ;;
                    "ds")
                        echo "${stat}.critical ${ds_crit}"
                        echo "${stat}.label DS"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${ds_warn}"
                    ;;
                    "dnskey")
                        echo "${stat}.critical ${dnskey_crit}"
                        echo "${stat}.label DNSKEY"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${dnskey_warn}"
                    ;;
                    "other")
                        echo "${stat}.critical ${other_crit}"
                        echo "${stat}.label OTHER"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${other_warn}"
                    ;;
                esac
            done
        ;;
        "clients")
            echo "graph_title Pi-hole clients"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel number of clients"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows clients seen by Pi-hole."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "clients_ever_seen")
                        echo "${stat}.critical ${clients_ever_seen_crit}"
                        echo "${stat}.label clients ever seen"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${clients_ever_seen_warn}"
                    ;;
                    "unique_clients")
                        echo "${stat}.critical ${unique_clients_crit}"
                        echo "${stat}.label unique clients"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${unique_clients_warn}"
                    ;;
                esac
            done
        ;;
        "percent")
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_args --base 1000 -l 0 -u 100"
            echo "graph_vlabel percent blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    echo "${stat}.critical ${ads_percentage_today_crit}"
                    echo "${stat}.label percentage blocked"
                    echo "${stat}.max 100"
                    echo "${stat}.min 0"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.warning ${ads_percentage_today_warn}"
                fi
            done
        ;;
        "privacy")
            echo "graph_title Pi-hole privacy level"
            echo "graph_args --base 1000 -l 0 -u 3"
            echo "graph_vlabel privacy level"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's privacy level."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "privacy_level" ]; then
                    echo "${stat}.critical ${privacy_level_crit}"
                    echo "${stat}.label privacy level"
                    echo "${stat}.max 3"
                    echo "${stat}.min 0"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.warning ${privacy_level_warn}"
                fi
            done
        ;;
        "queries")
            echo "graph_title Pi-hole queries"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel queries"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows queries seen by Pi-hole."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "dns_queries_today")
                        echo "${stat}.critical ${dns_queries_today_crit}"
                        echo "${stat}.label queries"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${dns_queries_today_warn}"
                    ;;
                    "ads_blocked_today")
                        echo "${stat}.critical ${ads_blocked_today_crit}"
                        echo "${stat}.label blocked queries"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${ads_blocked_today_warn}"
                    ;;
                    "queries_forwarded")
                        echo "${stat}.critical ${queries_forwarded_crit}"
                        echo "${stat}.label forwarded queries"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${queries_forwarded_warn}"
                    ;;
                    "queries_cached")
                        echo "${stat}.critical ${queries_cached_crit}"
                        echo "${stat}.label cached queries"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${queries_cached_warn}"
                    ;;
                esac
            done
        ;;
        "replies_by_type")
            echo "graph_title Pi-hole replies by type"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel answer packets"
            echo "graph_total total"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole replies by type."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "reply_UNKNOWN")
                        echo "${stat}.critical ${reply_UNKNOWN_crit}"
                        echo "${stat}.label UNKNOWN"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_UNKNOWN_warn}"
                    ;;
                    "reply_NODATA")
                        echo "${stat}.critical ${reply_NODATA_crit}"
                        echo "${stat}.label NODATA"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_NODATA_warn}"
                    ;;
                    "reply_NXDOMAIN")
                        echo "${stat}.critical ${reply_NXDOMAIN_crit}"
                        echo "${stat}.label NXDOMAIN"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_NXDOMAIN_warn}"
                    ;;
                    "reply_CNAME")
                        echo "${stat}.critical ${reply_CNAME_crit}"
                        echo "${stat}.label CNAME"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_CNAME_warn}"
                    ;;
                    "reply_IP")
                        echo "${stat}.critical ${reply_IP_crit}"
                        echo "${stat}.label IP"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_IP_warn}"
                    ;;
                    "reply_DOMAIN")
                        echo "${stat}.critical ${reply_DOMAIN_crit}"
                        echo "${stat}.label DOMAIN"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_DOMAIN_warn}"
                    ;;
                    "reply_RRNAME")
                        echo "${stat}.critical ${reply_RRNAME_crit}"
                        echo "${stat}.label RRNAME"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_RRNAME_warn}"
                    ;;
                    "reply_SERVFAIL")
                        echo "${stat}.critical ${reply_SERVFAIL_crit}"
                        echo "${stat}.label SERVFAIL"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_SERVFAIL_warn}"
                    ;;
                    "reply_REFUSED")
                        echo "${stat}.critical ${reply_REFUSED_crit}"
                        echo "${stat}.label REFUSED"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_REFUSED_warn}"
                    ;;
                    "reply_NOTIMP")
                        echo "${stat}.critical ${reply_NOTIMP_crit}"
                        echo "${stat}.label NOTIMP"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_NOTIMP_warn}"
                    ;;
                    "reply_OTHER")
                        echo "${stat}.critical ${reply_OTHER_crit}"
                        echo "${stat}.label OTHER"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_OTHER_warn}"
                    ;;
                    "reply_DNSSEC")
                        echo "${stat}.critical ${reply_DNSSEC_crit}"
                        echo "${stat}.label DNSSEC"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_DNSSEC_warn}"
                    ;;
                    "reply_NONE")
                        echo "${stat}.critical ${reply_NONE_crit}"
                        echo "${stat}.label NONE"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_NONE_warn}"
                    ;;
                    "reply_BLOB")
                        echo "${stat}.critical ${reply_BLOB_crit}"
                        echo "${stat}.label BLOB"
                        echo "${stat}.min 0"
                        echo "${stat}.type GAUGE"
                        echo "${stat}.warning ${reply_BLOB_warn}"
                    ;;
                esac
            done
        ;;
        "status")
            echo "graph_title Pi-hole blocking status"
            echo "graph_args --base 1000 -l -1 -u 1"
            echo "graph_vlabel unknown / disabled / enabled"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocking status."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "status" ]; then
                    echo "${stat}.critical ${status_crit}"
                    echo "${stat}.label blocking status"
                    echo "${stat}.max 1"
                    echo "${stat}.min -1"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.warning ${status_warn}"
                fi
            done
        ;;
        "unique_domains")
            echo "graph_title Pi-hole unique domains"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel unique domains"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows the unique domains seen by Pi-hole."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_domains" ]; then
                    echo "${stat}.critical ${unique_domains_crit}"
                    echo "${stat}.label unique domains"
                    echo "${stat}.min 0"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.warning ${unique_domains_warn}"
                fi
            done
        ;;
        *)
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_args --base 1000 -l 0 -u 100"
            echo "graph_vlabel percent blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    echo "${stat}.critical ${ads_percentage_today_crit}"
                    echo "${stat}.label percentage blocked"
                    echo "${stat}.max 100"
                    echo "${stat}.min 0"
                    echo "${stat}.type GAUGE"
                    echo "${stat}.warning ${ads_percentage_today_warn}"
                fi
            done
        ;;
    esac
}

plugin_data() {
    case ${plugin_id} in
        "blocked")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "domains_being_blocked" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "cache")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "cache-live-freed" ] || [ "${stat}" = "cache-inserted" ] || [ "${stat}" = "expired" ] || [ "${stat}" = "immortal" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "cache_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ipv4" ] || [ "${stat}" = "ipv6" ] || [ "${stat}" = "srv" ] || [ "${stat}" = "cname" ] || [ "${stat}" = "ds" ] || [ "${stat}" = "dnskey" ] || [ "${stat}" = "other" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "clients")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_clients" ] || [ "${stat}" = "clients_ever_seen" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "debug")
            echo "plugin version:"
            echo "\"${VERSION}\""
            echo "plugin api method:"
            echo "${api_method}"
            echo "plugin variables:"
            echo "api=\"${api}\""
            echo "cachesuffix=\"${cachesuffix}\""
            echo "ftl_portfile=\"${ftl_portfile}\""
            if [ -f "${ftl_portfile}" ]; then
                echo "\"${ftl_portfile}\" exists"
            else
                echo "\"${ftl_portfile}\" does not exist"
            fi
            echo "ftlport=\"${ftlport}\""
            echo "host=\"${host}\""
            echo "port=\"${port}\""
            echo "setupvars=\"${setupvars}\""
            if [ -f "${setupvars}" ]; then
                echo "\"${setupvars}\" exists"
            else
                echo "\"${setupvars}\" does not exist"
            fi
            echo "webpassword=\"${webpassword}\""
            echo "plugin commands:"
            if [ -x "$(command -v "nc")" ]; then
                echo "\"nc\" exists"
            else
                echo "\"nc\" does not exist"
            fi
            if [ -x "$(command -v "curl")" ]; then
                echo "\"curl\" exists"
            else
                echo "\"curl\" does not exist"
            fi
            echo "plugin critical/warning values:"
            echo "domains_being_blocked_crit=\"${domains_being_blocked_crit}\""
            echo "domains_being_blocked_warn=\"${domains_being_blocked_warn}\""
            echo "cache_live_freed_crit=\"${cache_live_freed_crit}\""
            echo "cache_live_freed_warn=\"${cache_live_freed_warn}\""
            echo "cache_inserted_crit=\"${cache_inserted_crit}\""
            echo "cache_inserted_warn=\"${cache_inserted_warn}\""
            echo "expired_crit=\"${expired_crit}\""
            echo "expired_warn=\"${expired_warn}\""
            echo "immortal_crit=\"${immortal_crit}\""
            echo "immortal_warn=\"${immortal_warn}\""
            echo "ipv4_crit=\"${ipv4_crit}\""
            echo "ipv4_warn=\"${ipv4_warn}\""
            echo "ipv6_crit=\"${ipv6_crit}\""
            echo "ipv6_warn=\"${ipv6_warn}\""
            echo "srv_crit=\"${srv_crit}\""
            echo "srv_warn=\"${srv_warn}\""
            echo "cname_crit=\"${cname_crit}\""
            echo "cname_warn=\"${cname_warn}\""
            echo "ds_crit=\"${ds_crit}\""
            echo "ds_warn=\"${ds_warn}\""
            echo "dnskey_crit=\"${dnskey_crit}\""
            echo "dnskey_warn=\"${dnskey_warn}\""
            echo "other_crit=\"${other_crit}\""
            echo "other_warn=\"${other_warn}\""
            echo "clients_ever_seen_crit=\"${clients_ever_seen_crit}\""
            echo "clients_ever_seen_warn=\"${clients_ever_seen_warn}\""
            echo "unique_clients_crit=\"${unique_clients_crit}\""
            echo "unique_clients_warn=\"${unique_clients_warn}\""
            echo "ads_percentage_today_crit=\"${ads_percentage_today_crit}\""
            echo "ads_percentage_today_warn=\"${ads_percentage_today_warn}\""
            echo "privacy_level_crit=\"${privacy_level_crit}\""
            echo "privacy_level_warn=\"${privacy_level_warn}\""
            echo "dns_queries_today_crit=\"${dns_queries-today_crit}\""
            echo "dns_queries_today_warn=\"${dns_queries_today_warn}\""
            echo "ads_blocked_today_crit=\"${ads_blocked_today_crit}\""
            echo "ads_blocked_today_warn=\"${ads_blocked_today_warn}\""
            echo "queries_forwarded_crit=\"${queries_forwarded_crit}\""
            echo "queries_forwarded_warn=\"${queries_forwarded_warn}\""
            echo "queries_cached_crit=\"${queries_cached_crit}\""
            echo "queries_cached_warn=\"${queries_cached_warn}\""
            echo "reply_UNKNOWN_crit=\"${reply_UNKNOWN_crit}\""
            echo "reply_UNKNOWN_warn=\"${reply_UNKNOWN_warn}\""
            echo "reply_NODATA_crit=\"${reply_NODATA_crit}\""
            echo "reply_NODATA_warn=\"${reply_NODATA_warn}\""
            echo "reply_NXDOMAIN_crit=\"${reply_NXDOMAIN_crit}\""
            echo "reply_NXDOMAIN_warn=\"${reply_NXDOMAIN_warn}\""
            echo "reply_CNAME_crit=\"${reply_CNAME_crit}\""
            echo "reply_CNAME_warn=\"${reply_CNAME_warn}\""
            echo "reply_IP_crit=\"${reply_IP_crit}\""
            echo "reply_IP_warn=\"${reply_IP_warn}\""
            echo "reply_DOMAIN_crit=\"${reply_DOMAIN_crit}\""
            echo "reply_DOMAIN_warn=\"${reply_DOMAIN_warn}\""
            echo "reply_RRNAME_crit=\"${reply_RRNAME_crit}\""
            echo "reply_RRNAME_warn=\"${reply_RRNAME_warn}\""
            echo "reply_SERVFAIL_crit=\"${reply_SERVFAIL_crit}\""
            echo "reply_SERVFAIL_warn=\"${reply_SERVFAIL_warn}\""
            echo "reply_REFUSED_crit=\"${reply_REFUSED_crit}\""
            echo "reply_REFUSED_warn=\"${reply_REFUSED_warn}\""
            echo "reply_NOTIMP_crit=\"${reply_NOTIMP_crit}\""
            echo "reply_NOTIMP_warn=\"${reply_NOTIMP_warn}\""
            echo "reply_OTHER_crit=\"${reply_OTHER_crit}\""
            echo "reply_OTHER_warn=\"${reply_OTHER_warn}\""
            echo "reply_DNSSEC_crit=\"${reply_DNSSEC_crit}\""
            echo "reply_DNSSEC_warn=\"${reply_DNSSEC_warn}\""
            echo "reply_NONE_crit=\"${reply_NONE_crit}\""
            echo "reply_NONE_warn=\"${reply_NONE_warn}\""
            echo "reply_BLOB_crit=\"${reply_BLOB_crit}\""
            echo "reply_BLOB_warn=\"${reply_BLOB_warn}\""
            echo "status_crit=\"${status_crit}\""
            echo "status_warn=\"${status_warn}\""
            echo "unique_domains_crit=\"${unique_domains_crit}\""
            echo "unique_domains_warn=\"${unique_domains_warn}\""
        ;;
        "percent")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "privacy")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "privacy_level" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "queries")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "dns_queries_today" ] || [ "${stat}" = "ads_blocked_today" ] || [ "${stat}" = "queries_forwarded" ] || [ "${stat}" = "queries_cached" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "replies_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "reply_UNKNOWN" ] || [ "${stat}" = "reply_NODATA" ] || [ "${stat}" = "reply_NXDOMAIN" ] || [ "${stat}" = "reply_CNAME" ] || [ "${stat}" = "reply_IP" ] || [ "${stat}" = "reply_DOMAIN" ] || [ "${stat}" = "reply_RRNAME" ] || [ "${stat}" = "reply_SERVFAIL" ] || [ "${stat}" = "reply_REFUSED" ] || [ "${stat}" = "reply_NOTIMP" ] || [ "${stat}" = "reply_OTHER" ] || [ "${stat}" = "reply_DNSSEC" ] || [ "${stat}" = "reply_NONE" ] || [ "${stat}" = "reply_BLOB" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "status")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "status" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    if [ "${value}" = "enabled" ]; then
                        echo "${stat}.value 1"
                    else
                        if [ "${value}" = "disabled" ]; then
                            echo "${stat}.value 0"
                        else
                            echo "${stat}.value -1"
                        fi
                    fi
                fi
            done
        ;;
        "unique_domains")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_domains" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        *)
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
    esac
}

plugin_suggest() {
    echo "blocked"
    echo "cache"
    echo "cache_by_type"
    echo "clients"
    echo "percent"
    echo "privacy"
    echo "queries"
    echo "replies_by_type"
    echo "status"
    echo "unique_domains"
    exit 0
}

case $1 in
    "autoconf")
        plugin_autoconf
    ;;
    "config")
        # shellcheck disable=SC2154
        plugin_config
        if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
            plugin_data
        fi
        exit 0
    ;;
    "suggest")
        plugin_suggest
    ;;
    *)
        plugin_data
        exit 0
    ;;
esac
