#!/bin/sh

# munin-pihole-plugins - pihole_
# saint-lascivious (Hayden Pearce) Â©2022

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Contact: munin-pihole-plugins@sainternet.xyz

# munin-pihole-plugins version
# must follow 8 character major.minor.micro scheme
VERSION="07.09.00"

: <<=cut
=head1 NAME

pihole_ - Munin plugins for monitoring various Pi-hole statistics.

=head1 VERSION

${VERSION}

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf,suggest

=head1 LICENSE

GNU GPLv3

=head1 APPLICABLE SYSTEMS

Systems with a default Pi-hole installation. If the Pi-hole install
is non-standard or located on another host, additional configuration
will be required.

=head1 PLUGINS

The monolithic plugin can display various different graphs depending on the munin-pihole-plugin plugin's basename or symbolic link names.

Plugin name:             Plugin description
 pihole_blocked          - Shows the number of domains blocked by Pi-hole.
 pihole_cache            - Shows Pi-hole's cache.
 pihole_cache_by_type    - Shows Pi-hole's cache by type.
 pihole_clients          - Shows clients seen by Pi-hole.
 pihole_debug            - Shows plugin debug information via commandline.
 pihole_percent          - Shows Pi-hole's blocked query percentage.
 pihole_privacy          - Shows Pi-hole's privacy level.
 pihole_queries          - Shows queries seen by Pi-hole.
 pihole_queries_by_type  - Shows Pi-hole queries by type.
 pihole_replies_by_type  - Shows Pi-hole replies by type.
 pihole_status           - Shows Pi-hole's blocking status.
 pihole_unique_domains   - Shows unique domains seen by Pi-hole.

Note for cache_* plugins:
Pi-hole API authentication required.
Either a Pi-hole setupVars.conf path or webpassword value must be supplied.

=head1 PLUGIN CONFIGURATION

Default munin-pihole-plugins pihole_ plugin configuration (default: /etc/munin/plugin-conf.d/pihole.conf).

[pihole_*]

    user root

    env.api_method telnet
    env.ftl_conf /etc/pihole/pihole-FTL.conf
    #env.ftl_port 4711
    env.host 127.0.0.1
    env.json_api /admin/api.php
    env.json_cachesuffix ?getCacheInfo&auth=
    env.json_port 80
    env.json_querysuffix ?getQueryTypes&auth=
    env.setupvars /etc/pihole/setupVars.conf
    #env.webpassword PIHOLE_SETUPVARS_WEBPASSWORD_HERE

    env.graph_category dns
    env.graph_height 200
    env.graph_scale no
    env.graph_type GAUGE
    env.graph_width 400

    # pihole_blocked
    env.blocked_rate 3600
    env.domains_being_blocked_crit 1:5000000
    env.domains_being_blocked_warn 0:3000000

    # pihole_cache
    #env.cache_rate
    #env.cache_expired_crit
    #env.cache_expired_warn
    #env.cache_immortal_crit
    #env.cache_immortal_warn
    #env.cache_inserted_crit
    #env.cache_inserted_warn
    #env.cache_live_freed_crit
    #env.cache_live_freed_warn
    env.cache_size_crit 1:10000
    env.cache_size_warn 10000:10000

    # pihole_cache_by_type
    #env.cache_by_type_rate
    #env.cache_A_crit
    #env.cache_A_warn
    #env.cache_AAAA_crit
    #env.cache_AAAA_warn
    #env.cache_CNAME_crit
    #env.cache_CNAME_warn
    #env.cache_DNSKEY_crit
    #env.cache_DNSKEY_warn
    #env.cache_DS_crit
    #env.cache_DS_warn
    #env.cache_OTHER_crit
    #env.cache_OTHER_warn
    #env.cache_SRV_crit
    #env.cache_SRV_warn

    # pihole_clients
    #env.clients_rate
    #env.clients_ever_seen_crit
    #env.clients_ever_seen_warn
    env.unique_clients_crit 100
    env.unique_clients_warn 1:50

    # pihole_percent
    #env.percent_rate
    env.ads_percentage_today_crit 95
    env.ads_percentage_today_warn 1:85

    # pihole_privacy
    #env.privacy_rate
    env.privacy_level_crit 1:3
    env.privacy_level_warn 3:3

    # pihole_queries
    #env.queries_rate
    #env.dns_queries_today_crit
    #env.dns_queries_today_warn
    #env.ads_blocked_today_crit
    #env.ads_blocked_today_warn
    #env.queries_forwarded_crit
    #env.queries_forwarded_warn
    #env.queries_cached_crit
    #env.queries_cached_warn

    # pihole_queries_by_type
    #env.queries_by_type_rate
    #env.query_A_crit
    #env.query_AAAA_warn
    #env.query_ANY_crit
    #env.query_ANY_warn
    #env.query_DNSKEY_crit
    #env.query_DNSKEY_warn
    #env.query_DS_crit
    #env.query_DS_warn
    #env.query_HTTPS_crit
    #env.query_HTTPS_warn
    #env.query_MX_crit
    #env.query_MX_warn
    #env.query_NAPTR_crit
    #env.query_NAPTR_warn
    #env.query_NS_crit
    #env.query_NS_warn
    #env.query_OTHER_crit
    #env.query_OTHER_warn
    #env.query_PTR_crit
    #env.query_PTR_warn
    #env.query_RRSIG_crit
    #env.query_RRSIG_warn
    #env.query_SOA_crit
    #env.query_SOA_warn
    #env.query_SRV_crit
    #env.query_SRV_warn
    #env.query_SVCB_crit
    #env.query_SVCB_warn
    #env.query_TXT_crit
    #env.query_TXT_warn

    # pihole_replies_by_type
    #env.replies_by_type_rate
    #env.reply_BLOB_crit
    #env.reply_BLOB_warn
    #env.reply_CNAME_crit
    #env.reply_CNAME_warn
    #env.reply_DNSSEC_crit
    #env.reply_DNSSEC_warn
    #env.reply_DOMAIN_crit
    #env.reply_DOMAIN_warn
    #env.reply_IP_crit
    #env.reply_IP_warn
    #env.reply_NOTIMP_crit
    #env.reply_NOTIMP_warn
    #env.reply_NODATA_crit
    #env.reply_NODATA_warn
    #env.reply_NONE_crit
    #env.reply_NONE_warn
    #env.reply_NXDOMAIN_crit
    #env.reply_NXDOMAIN_warn
    #env.reply_OTHER_crit
    #env.reply_OTHER_warn
    #env.reply_REFUSED_crit
    #env.reply_REFUSED_warn
    #env.reply_RRNAME_crit
    #env.reply_RRNAME_warn
    #env.reply_SERVFAIL_crit
    #env.reply_SERVFAIL_warn
    #env.reply_UNKNOWN_crit
    #env.reply_UNKNOWN_warn

    # pihole_status
    #env.status_rate
    env.status_crit 0:1
    env.status_warn 1:1

    # pihole_unique_domains
    #env.unique_domains_rate
    env.unique_domains_crit 1:20000
    env.unique_domains_warn 0:10000

Uncomment and/or (re-)define relevant env.* variables to override the default values to suit your requirement.

The graph_category value determines which category munin-pihole-plugins graphs will appear in Munin's interface.

The values for *_rate is a value in seconds. E.g. "60", "300", "3600".

The values for *_crit and *_warn can be a max value or a range separated by colon. E.g. "min:", ":max", "min:max", "max".

=head1 AUTHOR

Copyright saint-lascivious (Hayden Pearce) 2022

=cut

#%# family=auto
#%# capabilities=autoconf suggest

api_method="${api_method:-telnet}"
ftl_conf="${ftl_conf:-/etc/pihole/pihole-FTL.conf}"
if [ -f "${ftl_conf}" ]; then
    get_ftlport="$(cat < "${ftl_conf}" | grep FTLPORT | sed s/FTLPORT=//g)"
    if [ -n "${get_ftlport}" ]; then
        ftl_port="${ftl_port:-${get_ftlport}}"
    else
        ftl_port="${ftl_port:-4711}"
    fi
else
    ftl_port="${ftl_port:-}"
fi
host="${host:-127.0.0.1}"
json_api="${json_api:-/admin/api.php}"
json_cachesuffix="${json_cachesuffix:-?getCacheInfo&auth=}"
json_port="${json_port:-80}"
plugin_id="$(echo "$0" | sed -e 's/^.*pihole_//')"
json_querysuffix="${json_querysuffix:-?getQueryTypes&auth=}"
setupvars="${setupvars:-/etc/pihole/setupVars.conf}"
if [ -f "${setupvars}" ]; then
    get_webpassword="$(cat < "${setupvars}" | grep WEBPASSWORD | sed s/WEBPASSWORD=//g)"
    if [ -n "${get_webpassword}" ]; then
        webpassword="${webpassword:-${get_webpassword}}"
    else
        webpassword="${webpassword:-}"
    fi
else
    webpassword="${webpassword:-}"
fi

blocked_rate="${blocked_rate:-3600}"
cache_rate="${cache_rate:-}"
cache_by_type_rate="${cache_by_type_rate:-}"
clients_rate="${clients_rate:-60}"
percent_rate="${percent_rate:-}"
privacy_rate="${privacy_rate:-}"
queries_rate="${queries_rate:-}"
queries_by_type_rate="${queries_by_type_rate:-}"
replies_by_type_rate="${replies_by_type_rate:-}"
status_rate="${status_rate:-60}"
unique_domains_rate="${unique_domains_rate:-}"

graph_category="${graph_category:-dns}"
graph_height="${graph_height:-200}"
graph_scale="${graph_scale:-no}"
graph_type="${graph_type:-GAUGE}"
graph_width="${graph_width:-400}"

domains_being_blocked_crit="${domains_being_blocked_crit:-1:5000000}"
domains_being_blocked_warn="${domains_being_blocked_warn:-0:3000000}"
cache_expired_crit="${cache_expired_crit:-}"
cache_expired_warn="${cache_expired_warn:-}"
cache_inserted_crit="${cache_inserted_crit:-}"
cache_inserted_warn="${cache_inserted_warn:-}"
cache_immortal_crit="${cache_immortal_crit:-}"
cache_immortal_warn="${cache_immortal_warn:-}"
cache_live_freed_crit="${cache_live_freed_crit:-}"
cache_live_freed_warn="${cache_live_freed_warn:-}"
cache_size_crit="${cache_size_crit:-1:10000}"
cache_size_warn="${cache_size_warn:-10000:10000}"
cache_A_crit="${cache_A_crit:-}"
cache_A_warn="${cache_A_warn:-}"
cache_AAAA_crit="${cache_AAAA_crit:-}"
cache_AAAA_warn="${cache_AAAA_warn:-}"
cache_SRV_crit="${cache_SRV_crit:-}"
cache_SRV_warn="${cache_SRV_warn:-}"
cache_CNAME_crit="${cache_CNAME_crit:-}"
cache_CNAME_warn="${cache_CNAME_warn:-}"
cache_DS_crit="${cache_DS_crit:-}"
cache_DS_warn="${cache_DS_warn:-}"
cache_DNSKEY_crit="${cache_DNSKEY_crit:-}"
cache_DNSKEY_warn="${cache_DNSKEY_warn:-}"
cache_OTHER_crit="${cache_OTHER_crit:-}"
cache_OTHER_warn="${cache_OTHER_warn:-}"
clients_ever_seen_crit="${clients_ever_seen_crit:-}"
clients_ever_seen_warn="${clients_ever_seen_warn:-}"
unique_clients_crit="${unique_clients_crit:-100}"
unique_clients_warn="${unique_clients_warn:-1:50}"
ads_percentage_today_crit="${ads_percentage_today_crit:-98}"
ads_percentage_today_warn="${ads_percentage_today_warn:-1:85}"
privacy_level_crit="${privacy_level_crit:-}"
privacy_level_warn="${privacy_level_warn:-}"
dns_queries_today_crit="${dns_queries_today_crit:-}"
dns_queries_today_warn="${dns_queries_today_warn:-}"
ads_blocked_today_crit="${ads_blocked_today_crit:-}"
ads_blocked_today_warn="${ads_blocked_today_warn:-}"
queries_forwarded_crit="${queries_forwarded_crit:-}"
queries_forwarded_warn="${queries_forwarded_warn:-}"
queries_cached_crit="${queries_cached_crit:-}"
queries_cached_warn="${queries_cached_warn:-}"
query_A_crit="${query_A_crit:-}"
query_A_warn="${query_A_warn:-}"
query_AAAA_crit="${query_AAAA_crit:-}"
query_AAAA_warn="${query_AAAA_warn:-}"
query_ANY_crit="${query_ANY_crit:-}"
query_ANY_warn="${query_ANY_warn:-}"
query_DNSKEY_crit="${query_DNSKEY_crit:-}"
query_DNSKEY_warn="${query_DNSKEY_warn:-}"
query_DS_crit="${query_DS_crit:-}"
query_DS_warn="${query_DS_warn:-}"
query_HTTPS_crit="${query_HTTPS_crit:-}"
query_HTTPS_warn="${query_HTTPS_warn:-}"
query_MX_crit="${query_MX_crit:-}"
query_MX_warn="${query_MX_warn:-}"
query_NAPTR_crit="${query_NAPTR_crit:-}"
query_NAPTR_warn="${query_NAPTR_warn:-}"
query_NS_crit="${query_NS_crit:-}"
query_NS_warn="${query_NS_warn:-}"
query_OTHER_crit="${query_OTHER_crit:-}"
query_OTHER_warn="${query_OTHER_warn:-}"
query_PTR_crit="${query_PTR_crit:-}"
query_PTR_warn="${query_PTR_warn:-}"
query_RRSIG_crit="${query_RRSIG_crit:-}"
query_RRSIG_warn="${query_RRSIG_warn:-}"
query_SOA_crit="${query_SOA_crit:-}"
query_SOA_warn="${query_SOA_warn:-}"
query_SRV_crit="${query_SRV_crit:-}"
query_SRV_warn="${query_SRV_warn:-}"
query_SVCB_crit="${query_SVCB_crit:-}"
query_SVCB_warn="${query_SVCB_warn:-}"
query_TXT_crit="${query_TXT_crit:-}"
query_TXT_warn="${query_TXT_warn:-}"
reply_UNKNOWN_crit="${reply_UNKNOWN_crit:-}"
reply_UNKNOWN_warn="${reply_UNKNOWN_warn:-}"
reply_NODATA_crit="${reply_NODATA_crit:-}"
reply_NODATA_warn="${reply_NODATA_warn:-}"
reply_NXDOMAIN_crit="${reply_NXDOMAIN_crit:-}"
reply_NXDOMAIN_warn="${reply_NXDOMAIN_warn:-}"
reply_CNAME_crit="${reply_CNAME_crit:-}"
reply_CNAME_warn="${reply_CNAME_warn:-}"
reply_IP_crit="${reply_IP_crit:-}"
reply_IP_warn="${reply_IP_warn:-}"
reply_DOMAIN_crit="${reply_DOMAIN_crit:-}"
reply_DOMAIN_warn="${reply_DOMAIN_warn:-}"
reply_RRNAME_crit="${reply_RRNAME_crit:-}"
reply_RRNAME_warn="${reply_RRNAME_warn:-}"
reply_SERVFAIL_crit="${reply_SERVFAIL_crit:-}"
reply_SERVFAIL_warn="${reply_SERVFAIL_warn:-}"
reply_REFUSED_crit="${reply_REFUSED_crit:-}"
reply_REFUSED_warn="${reply_REFUSED_warn:-}"
reply_NOTIMP_crit="${reply_NOTIMP_crit:-}"
reply_NOTIMP_warn="${reply_NOTIMP_warn:-}"
reply_OTHER_crit="${reply_OTHER_crit:-}"
reply_OTHER_warn="${reply_OTHER_warn:-}"
reply_DNSSEC_crit="${reply_DNSSEC_crit:-}"
reply_DNSSEC_warn="${reply_DNSSEC_warn:-}"
reply_NONE_crit="${reply_NONE_crit:-}"
reply_NONE_warn="${reply_NONE_warn:-}"
reply_BLOB_crit="${reply_BLOB_crit:-}"
reply_BLOB_warn="${reply_BLOB_warn:-}"
status_crit="${status_crit:-0:1}"
status_warn="${status_warn:-1:}"
unique_domains_crit="${unique_domains_crit:-1:20000}"
unique_domains_warn="${unique_domains_warn:-0:10000}"

if [ -z "${plugin_id}" ]; then
    plugin_id="percent"
fi

case ${api_method} in
    "json")
        case ${plugin_id} in
            "cache" | "cache_by_type")
                get_stats="$(echo "curl -sL ${host}:${json_port}${json_api}${json_cachesuffix}${webpassword} 2>/dev/null" | sed 's/[{}"]//g; s/cacheinfo://; s/ipv4/a/; s/ipv6/aaaa/' | tr "," "\\n" | sort -u)"
            ;;
            "queries_by_type")
                get_stats="$(echo "curl -sL ${host}:${json_port}${json_api}${json_querysuffix}${webpassword} 2>/dev/null" | sed 's/[{}"]//g; s/querytypes://; s/ (IPv4)//; s/ (IPv6)//' | tr "," "\\n" | sort -u)"
            ;;
            *)
                get_stats="$(echo "curl -sL ${host}:${json_port}${json_api} 2>/dev/null" | sed 's/[{}"]//g' | tr "," "\\n" | sort -u)"
            ;;
        esac
    ;;
    "telnet")
        case ${plugin_id} in
            "cache" | "cache_by_type")
                get_stats="$(echo ">cacheinfo >quit" | nc "${host}" "${ftl_port}" 2>/dev/null | sed 's/ipv4/a/; s/ipv6/aaaa/; s/ //' | sort -u)"
            ;;
            "queries_by_type")
                get_stats="$(echo ">querytypes >quit" | nc "${host}" "${ftl_port}" 2>/dev/null | sed 's/ (IPv4)//; s/ (IPv6)//; s/ //' | sort -u)"
            ;;
            *)
                get_stats="$(echo ">stats >quit" | nc "${host}" "${ftl_port}" 2>/dev/null | sed 's/ /:/' | sort -u)"
            ;;
        esac
    ;;
    *)
        exit 1
    ;;
esac

plugin_autoconf() {
    if [ "${api_method}" = "json" ] && [ -n "${webpassword}" ]; then
        if [ ! -x "$(command -v "curl")" ]; then
            echo "no (curl does not exist)"
            exit 0
        fi
        echo "yes"
        exit 0
    else
        if [ "${api_method}" = "telnet" ] && [ -n "${ftl_port}" ]; then
            if [ ! -x "$(command -v "nc")" ]; then
                echo "no (nc does not exist)"
                exit 0
            fi
            echo "yes"
            exit 0
        fi
    fi
}

plugin_config() {
    case ${plugin_id} in
        "blocked")
            echo "graph_args --base 1000 --lower-limit 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows the number of domains blocked by Pi-hole."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole domains being blocked"
            echo "graph_vlabel domains being blocked"
            echo "graph_width ${graph_width}"
            if [ -n "${blocked_rate}" ]; then
                echo "update_rate ${blocked_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "domains_being_blocked" ]; then
                    echo "${stat}.critical ${domains_being_blocked_crit}"
                    echo "${stat}.info Pi-hole blocked domains"
                    echo "${stat}.label blocked domains"
                    echo "${stat}.min 0"
                    echo "${stat}.type ${graph_type}"
                    echo "${stat}.warning ${domains_being_blocked_warn}"
                fi
            done
        ;;
        "cache")
            echo "graph_args --base 1000 --lower-limit 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole's cache."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole cache"
            echo "graph_vlabel cache packets"
            echo "graph_width ${graph_width}"
            if [ -n "${cache_rate}" ]; then
                echo "update_rate ${cache_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "expired")
                        echo "${stat}.critical ${cache_expired_crit}"
                        echo "${stat}.info Pi-hole cache expired"
                        echo "${stat}.label cache expired"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_expired_warn}"
                    ;;
                    "immortal")
                        echo "${stat}.critical ${cache_immortal_crit}"
                        echo "${stat}.info Pi-hole cache immortal"
                        echo "${stat}.label cache immortal"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_immortal_warn}"
                    ;;
                    "cache-inserted")
                        echo "${stat}.critical ${cache_inserted_crit}"
                        echo "${stat}.info Pi-hole cache inserted"
                        echo "${stat}.label cache inserted"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_inserted_warn}"
                    ;;
                    "cache-live-freed")
                        echo "${stat}.critical ${cache_live_freed_crit}"
                        echo "${stat}.info Pi-hole cache live freed"
                        echo "${stat}.label cache live freed"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_live_freed_warn}"
                    ;;
                    "cache-size")
                        echo "${stat}.critical ${cache_size_crit}"
                        echo "${stat}.info Pi-hole cache size"
                        echo "${stat}.label cache size"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_size_warn}"
                    ;;
                esac
            done
        ;;
        "cache_by_type")
            echo "graph_args --base 1000 --lower-limit 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole's cache by type."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole cache by type"
            echo "graph_total total"
            echo "graph_vlabel cache packets"
            echo "graph_width ${graph_width}"
            if [ -n "${cache_by_type_rate}" ]; then
                echo "update_rate ${cache_by_type_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "a")
                        echo "${stat}.critical ${cache_A_crit}"
                        echo "${stat}.info Pi-hole cache type A"
                        echo "${stat}.label A"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_A_warn}"
                    ;;
                    "aaaa")
                        echo "${stat}.critical ${cache_AAAA_crit}"
                        echo "${stat}.info Pi-hole cache type AAAA"
                        echo "${stat}.label AAAA"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_AAAA_warn}"
                    ;;
                    "cname")
                        echo "${stat}.critical ${cache_CNAME_crit}"
                        echo "${stat}.info Pi-hole cache type CNAME"
                        echo "${stat}.label CNAME"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_CNAME_warn}"
                    ;;
                    "ds")
                        echo "${stat}.critical ${cache_DS_crit}"
                        echo "${stat}.info Pi-hole cache type DS"
                        echo "${stat}.label DS"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_DS_warn}"
                    ;;
                    "dnskey")
                        echo "${stat}.critical ${cache_DNSKEY_crit}"
                        echo "${stat}.info Pi-hole cache type DNSKEY"
                        echo "${stat}.label DNSKEY"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_DNSKEY_warn}"
                    ;;
                    "other")
                        echo "${stat}.critical ${cache_OTHER_crit}"
                        echo "${stat}.info Pi-hole cache type OTHER"
                        echo "${stat}.label OTHER"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_OTHER_warn}"
                    ;;
                    "srv")
                        echo "${stat}.critical ${cache_SRV_crit}"
                        echo "${stat}.info Pi-hole cache type SRV"
                        echo "${stat}.label SRV"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${cache_SRV_warn}"
                    ;;
                esac
            done
        ;;
        "clients")
            echo "graph_args --base 1000 --lower-limit 0 --units-exponent 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows clients seen by Pi-hole."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole clients"
            echo "graph_vlabel number of clients"
            echo "graph_width ${graph_width}"
            if [ -n "${clients_rate}" ]; then
                echo "update_rate ${clients_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "clients_ever_seen")
                        echo "${stat}.critical ${clients_ever_seen_crit}"
                        echo "${stat}.info Pi-hole clients ever seen"
                        echo "${stat}.label clients ever seen"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${clients_ever_seen_warn}"
                    ;;
                    "unique_clients")
                        echo "${stat}.critical ${unique_clients_crit}"
                        echo "${stat}.info Pi-hole unique clients"
                        echo "${stat}.label unique clients"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${unique_clients_warn}"
                    ;;
                esac
            done
        ;;
        "percent")
            echo "graph_args --base 1000 --lower-limit 0 --rigid --upper-limit 100"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_vlabel blocked query percent"
            echo "graph_width ${graph_width}"
            if [ -n "${percent_rate}" ]; then
                echo "update_rate ${percent_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    echo "${stat}.critical ${ads_percentage_today_crit}"
                    echo "${stat}.info Pi-hole percentage blocked"
                    echo "${stat}.label percentage blocked"
                    echo "${stat}.max 100"
                    echo "${stat}.min 0"
                    echo "${stat}.type ${graph_type}"
                    echo "${stat}.warning ${ads_percentage_today_warn}"
                fi
            done
        ;;
        "privacy")
            echo "graph_args --base 1000 --lower-limit 0 --rigid --upper-limit 3 --units-exponent 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole's privacy level."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole privacy level"
            echo "graph_vlabel privacy level"
            echo "graph_width ${graph_width}"
            if [ -n "${privacy_rate}" ]; then
                echo "update_rate ${privacy_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "privacy_level" ]; then
                    echo "${stat}.critical ${privacy_level_crit}"
                    echo "${stat}.info Pi-hole privacy level"
                    echo "${stat}.label privacy level"
                    echo "${stat}.max 3"
                    echo "${stat}.min 0"
                    echo "${stat}.type ${graph_type}"
                    echo "${stat}.warning ${privacy_level_warn}"
                fi
            done
        ;;
        "queries")
            echo "graph_args --base 1000 --lower-limit 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows queries seen by Pi-hole."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole queries"
            echo "graph_vlabel queries"
            echo "graph_width ${graph_width}"
            if [ -n "${queries_rate}" ]; then
                echo "update_rate ${queries_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "ads_blocked_today")
                        echo "${stat}.critical ${ads_blocked_today_crit}"
                        echo "${stat}.info Pi-hole queries blocked"
                        echo "${stat}.label queries blocked"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${ads_blocked_today_warn}"
                    ;;
                    "queries_cached")
                        echo "${stat}.critical ${queries_cached_crit}"
                        echo "${stat}.info Pi-hole queries cached"
                        echo "${stat}.label queries cached"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${queries_cached_warn}"
                    ;;
                    "queries_forwarded")
                        echo "${stat}.critical ${queries_forwarded_crit}"
                        echo "${stat}.info Pi-hole queries forwarded"
                        echo "${stat}.label queries forwarded"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${queries_forwarded_warn}"
                    ;;
                    "dns_queries_today")
                        echo "${stat}.critical ${dns_queries_today_crit}"
                        echo "${stat}.info Pi-hole queries"
                        echo "${stat}.label queries"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${dns_queries_today_warn}"
                    ;;
                esac
            done
        ;;
        "queries_by_type")
            echo "graph_args --base 1000 --lower-limit 0 --rigid --upper-limit 100"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole queries by type."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole queries by type"
            echo "graph_vlabel percent queries by type"
            echo "graph_width ${graph_width}"
            if [ -n "${queries_by_type_rate}" ]; then
                echo "update_rate ${queries_by_type_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "A")
                        echo "${stat}.critical ${query_A_crit}"
                        echo "${stat}.info Pi-hole query type A"
                        echo "${stat}.label A"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_A_warn}"
                    ;;
                    "AAAA")
                        echo "${stat}.critical ${query_AAAA_crit}"
                        echo "${stat}.info Pi-hole query type AAAA"
                        echo "${stat}.label AAAA"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_A_warn}"
                    ;;
                    "ANY")
                        echo "${stat}.critical ${query_ANY_crit}"
                        echo "${stat}.info Pi-hole query type ANY"
                        echo "${stat}.label ANY"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_ANY_warn}"
                    ;;
                    "DNSKEY")
                        echo "${stat}.critical ${query_DNSKEY_crit}"
                        echo "${stat}.info Pi-hole query type DNSKEY"
                        echo "${stat}.label DNSKEY"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_DNSKEY_warn}"
                    ;;
                    "DS")
                        echo "${stat}.critical ${query_DS_crit}"
                        echo "${stat}.info Pi-hole query type DS"
                        echo "${stat}.label DS"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_DS_warn}"
                    ;;
                    "HTTPS")
                        echo "${stat}.critical ${query_HTTPS_crit}"
                        echo "${stat}.info Pi-hole query type HTTPS"
                        echo "${stat}.label HTTPS"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_HTTPS_warn}"
                    ;;
                    "MX")
                        echo "${stat}.critical ${query_MX_crit}"
                        echo "${stat}.info Pi-hole query type MX"
                        echo "${stat}.label MX"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_MX_warn}"
                    ;;
                    "NAPTR")
                        echo "${stat}.critical ${query_NAPTR_crit}"
                        echo "${stat}.info Pi-hole query type NAPTR"
                        echo "${stat}.label NAPTR"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_NAPTR_warn}"
                    ;;
                    "NS")
                        echo "${stat}.critical ${query_NS_crit}"
                        echo "${stat}.info Pi-hole query type NS"
                        echo "${stat}.label NS"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_NS_warn}"
                    ;;
                    "OTHER")
                        echo "${stat}.critical ${query_OTHER_crit}"
                        echo "${stat}.info Pi-hole query type OTHER"
                        echo "${stat}.label OTHER"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_OTHER_warn}"
                    ;;
                    "PTR")
                        echo "${stat}.critical ${query_PTR_crit}"
                        echo "${stat}.info Pi-hole query type PTR"
                        echo "${stat}.label PTR"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_PTR_warn}"
                    ;;
                    "RRSIG")
                        echo "${stat}.critical ${query_RRSIG_crit}"
                        echo "${stat}.info Pi-hole query type RRSIG"
                        echo "${stat}.label RRSIG"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_RRSIG_warn}"
                    ;;
                    "SOA")
                        echo "${stat}.critical ${query_SOA_crit}"
                        echo "${stat}.info Pi-hole query type SOA"
                        echo "${stat}.label SOA"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_SOA_warn}"
                    ;;
                    "SRV")
                        echo "${stat}.critical ${query_SRV_crit}"
                        echo "${stat}.info Pi-hole query type SRV"
                        echo "${stat}.label SRV"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_SRV_warn}"
                    ;;
                    "SVCB")
                        echo "${stat}.critical ${query_SVCB_crit}"
                        echo "${stat}.info Pi-hole query type SVCB"
                        echo "${stat}.label SVCB"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_SVCB_warn}"
                    ;;
                    "TXT")
                        echo "${stat}.critical ${query_TXT_crit}"
                        echo "${stat}.info Pi-hole query type TXT"
                        echo "${stat}.label TXT"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${query_TXT_warn}"
                    ;;
                esac
            done
        ;;
        "replies_by_type")
            echo "graph_args --base 1000 --lower-limit 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole replies by type."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole replies by type"
            echo "graph_total total"
            echo "graph_vlabel answer packets"
            echo "graph_width ${graph_width}"
            if [ -n "${replies_by_type_rate}" ]; then
                echo "update_rate ${replies_by_type_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                case "${stat}" in
                    "reply_BLOB")
                        echo "${stat}.critical ${reply_BLOB_crit}"
                        echo "${stat}.info Pi-hole reply type BLOB"
                        echo "${stat}.label BLOB"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_BLOB_warn}"
                    ;;
                    "reply_CNAME")
                        echo "${stat}.critical ${reply_CNAME_crit}"
                        echo "${stat}.info Pi-hole reply type CNAME"
                        echo "${stat}.label CNAME"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_CNAME_warn}"
                    ;;
                    "reply_DNSSEC")
                        echo "${stat}.critical ${reply_DNSSEC_crit}"
                        echo "${stat}.info Pi-hole reply type DNSSEC"
                        echo "${stat}.label DNSSEC"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_DNSSEC_warn}"
                    ;;
                    "reply_DOMAIN")
                        echo "${stat}.critical ${reply_DOMAIN_crit}"
                        echo "${stat}.info Pi-hole reply type DOMAIN"
                        echo "${stat}.label DOMAIN"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_DOMAIN_warn}"
                    ;;
                    "reply_IP")
                        echo "${stat}.critical ${reply_IP_crit}"
                        echo "${stat}.info Pi-hole reply type IP"
                        echo "${stat}.label IP"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_IP_warn}"
                    ;;
                    "reply_NODATA")
                        echo "${stat}.critical ${reply_NODATA_crit}"
                        echo "${stat}.info Pi-hole reply type NODATA"
                        echo "${stat}.label NODATA"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_NODATA_warn}"
                    ;;
                    "reply_NXDOMAIN")
                        echo "${stat}.critical ${reply_NXDOMAIN_crit}"
                        echo "${stat}.info Pi-hole reply type NXDOMAIN"
                        echo "${stat}.label NXDOMAIN"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_NXDOMAIN_warn}"
                    ;;
                    "reply_REFUSED")
                        echo "${stat}.critical ${reply_REFUSED_crit}"
                        echo "${stat}.info Pi-hole reply type REFUSED"
                        echo "${stat}.label REFUSED"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_REFUSED_warn}"
                    ;;
                    "reply_RRNAME")
                        echo "${stat}.critical ${reply_RRNAME_crit}"
                        echo "${stat}.info Pi-hole reply type RRNAME"
                        echo "${stat}.label RRNAME"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_RRNAME_warn}"
                    ;;
                    "reply_SERVFAIL")
                        echo "${stat}.critical ${reply_SERVFAIL_crit}"
                        echo "${stat}.info Pi-hole reply type SERVFAIL"
                        echo "${stat}.label SERVFAIL"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_SERVFAIL_warn}"
                    ;;
                    "reply_NONE")
                        echo "${stat}.critical ${reply_NONE_crit}"
                        echo "${stat}.info Pi-hole reply type NONE"
                        echo "${stat}.label NONE"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_NONE_warn}"
                    ;;
                    "reply_NOTIMP")
                        echo "${stat}.critical ${reply_NOTIMP_crit}"
                        echo "${stat}.info Pi-hole reply type NOTIMP"
                        echo "${stat}.label NOTIMP"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_NOTIMP_warn}"
                    ;;
                    "reply_OTHER")
                        echo "${stat}.critical ${reply_OTHER_crit}"
                        echo "${stat}.info Pi-hole reply type OTHER"
                        echo "${stat}.label OTHER"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_OTHER_warn}"
                    ;;
                    "reply_UNKNOWN")
                        echo "${stat}.critical ${reply_UNKNOWN_crit}"
                        echo "${stat}.info Pi-hole reply type UNKNOWN"
                        echo "${stat}.label UNKNOWN"
                        echo "${stat}.min 0"
                        echo "${stat}.type ${graph_type}"
                        echo "${stat}.warning ${reply_UNKNOWN_warn}"
                    ;;
                esac
            done
        ;;
        "status")
            echo "graph_args --base 1000 --lower-limit -1 --rigid --upper-limit 1 --units-exponent 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole's blocking status."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole blocking status"
            echo "graph_vlabel unknown / disabled / enabled"
            echo "graph_width ${graph_width}"
            if [ -n "${status_rate}" ]; then
                echo "update_rate ${status_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "status" ]; then
                    echo "${stat}.critical ${status_crit}"
                    echo "${stat}.info Pi-hole blocking status"
                    echo "${stat}.label blocking status"
                    echo "${stat}.max 1"
                    echo "${stat}.min -1"
                    echo "${stat}.type ${graph_type}"
                    echo "${stat}.warning ${status_warn}"
                fi
            done
        ;;
        "unique_domains")
            echo "graph_args --base 1000 --lower-limit 0"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows the unique domains seen by Pi-hole."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole unique domains"
            echo "graph_vlabel unique domains"
            echo "graph_width ${graph_width}"
            if [ -n "${unique_domains_rate}" ]; then
                echo "update_rate ${unique_domains_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_domains" ]; then
                    echo "${stat}.critical ${unique_domains_crit}"
                    echo "${stat}.info Pi-hole unique domains"
                    echo "${stat}.label unique domains"
                    echo "${stat}.min 0"
                    echo "${stat}.type ${graph_type}"
                    echo "${stat}.warning ${unique_domains_warn}"
                fi
            done
        ;;
        *)
            echo "graph_args --base 1000 --lower-limit 0 --rigid --upper-limit 100"
            echo "graph_category ${graph_category}"
            echo "graph_height ${graph_height}"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            echo "graph_scale ${graph_scale}"
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_vlabel blocked query percent"
            echo "graph_width ${graph_width}"
            if [ -n "${percent_rate}" ]; then
                echo "update_rate ${percent_rate}"
            fi
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    echo "${stat}.critical ${ads_percentage_today_crit}"
                    echo "${stat}.info Pi-hole percentage blocked"
                    echo "${stat}.label percentage blocked"
                    echo "${stat}.max 100"
                    echo "${stat}.min 0"
                    echo "${stat}.type ${graph_type}"
                    echo "${stat}.warning ${ads_percentage_today_warn}"
                fi
            done
    esac
}

plugin_data() {
    case ${plugin_id} in
        "blocked")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "domains_being_blocked" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "cache")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "expired" ] || [ "${stat}" = "immortal" ] || [ "${stat}" = "cache-inserted" ] || [ "${stat}" = "cache-live-freed" ] || [ "${stat}" = "cache-size" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "cache_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "a" ] || [ "${stat}" = "aaaa" ] || [ "${stat}" = "cname" ] || [ "${stat}" = "ds" ] || [ "${stat}" = "dnskey" ] || [ "${stat}" = "other" ] || [ "${stat}" = "srv" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "clients")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_clients" ] || [ "${stat}" = "clients_ever_seen" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "debug")
            echo "plugin version:"
            echo "\"${VERSION}\""
            echo "plugin variables:"
            echo "api_method=\"${api_method}\""
            echo "ftl_conf=\"${ftl_conf}\""
            if [ -f "${ftl_conf}" ]; then
                echo "\"${ftl_conf}\" exists"
            else
                echo "\"${ftl_conf}\" does not exist"
            fi
            echo "ftl_port=\"${ftl_port}\""
            echo "host=\"${host}\""
            echo "json_api=\"${json_api}\""
            echo "json_cachesuffix=\"${json_cachesuffix}\""
            echo "json_port=\"${json_port}\""
            echo "json_querysuffix=\"${json_querysuffix}\""
            echo "setupvars=\"${setupvars}\""
            if [ -f "${setupvars}" ]; then
                echo "\"${setupvars}\" exists"
            else
                echo "\"${setupvars}\" does not exist"
            fi
            echo "webpassword=\"${webpassword}\""
            echo "plugin commands:"
            if [ -x "$(command -v "nc")" ]; then
                echo "\"nc\" exists"
            else
                echo "\"nc\" does not exist"
            fi
            if [ -x "$(command -v "curl")" ]; then
                echo "\"curl\" exists"
            else
                echo "\"curl\" does not exist"
            fi
            if [ -x "$(command -v "less")" ] || [ -x "$(command -v "more")" ]; then
                echo "plugin graph category:"
                echo "graph_category=\"${graph_category}\""
                echo "plugin graph height:"
                echo "graph_height=\"${graph_height}\""
                echo "plugin graph scale:"
                echo "graph_scale=\"${graph_scale}\""
                echo "plugin graph type:"
                echo "graph_type=\"${graph_type}\""
                echo "plugin graph width:"
                echo "graph_width=\"${graph_width}\""
                echo "plugin update rate values:"
                echo "blocked_rate=\"${blocked_rate}\""
                echo "cache_rate=\"${cache_rate}\""
                echo "cache_by_type_rate=\"${cache_by_type_rate}\""
                echo "clients_rate=\"${clients_rate}\""
                echo "percent_rate=\"${percent_rate}\""
                echo "privacy_rate=\"${privacy_rate}\""
                echo "queries_rate=\"${queries_rate}\""
                echo "queries_by_type_rate=\"${queries_by_type_rate}\""
                echo "replies_by_type_rate=\"${replies_by_type_rate}\""
                echo "status_rate=\"${status_rate}\""
                echo "unique_domains_rate=\"${unique_domains_rate}\""
                echo "plugin critical/warning values:"
                echo "domains_being_blocked_crit=\"${domains_being_blocked_crit}\""
                echo "domains_being_blocked_warn=\"${domains_being_blocked_warn}\""
                echo "cache_expired_crit=\"${cache_expired_crit}\""
                echo "cache_expired_warn=\"${cache_expired_warn}\""
                echo "cache_immortal_crit=\"${cache_immortal_crit}\""
                echo "cache_immortal_warn=\"${cache_immortal_warn}\""
                echo "cache_inserted_crit=\"${cache_inserted_crit}\""
                echo "cache_inserted_warn=\"${cache_inserted_warn}\""
                echo "cache_live_freed_crit=\"${cache_live_freed_crit}\""
                echo "cache_live_freed_warn=\"${cache_live_freed_warn}\""
                echo "cache_size_crit=\"${cache_size_crit}\""
                echo "cache_size_warn=\"${cache_size_warn}\""
                echo "cache_A_crit=\"${cache_A_crit}\""
                echo "cache_A_warn=\"${cache_A_warn}\""
                echo "cache_AAAA_crit=\"${cache_AAAA_crit}\""
                echo "cache_AAAA_warn=\"${cache_AAAA_warn}\""
                echo "cache_SRV_crit=\"${cache_SRV_crit}\""
                echo "cache_SRV_warn=\"${cache_SRV_warn}\""
                echo "cache_CNAME_crit=\"${cache_CNAME_crit}\""
                echo "cache_CNAME_warn=\"${cache_CNAME_warn}\""
                echo "cache_DS_crit=\"${cache_DS_crit}\""
                echo "cache_DS_warn=\"${cache_DS_warn}\""
                echo "cache_DNSKEY_crit=\"${cache_DNSKEY_crit}\""
                echo "cache_DNSKEY_warn=\"${cache_DNSKEY_warn}\""
                echo "cache_OTHER_crit=\"${cache_OTHER_crit}\""
                echo "cache_OTHER_warn=\"${cache_OTHER_warn}\""
                echo "clients_ever_seen_crit=\"${clients_ever_seen_crit}\""
                echo "clients_ever_seen_warn=\"${clients_ever_seen_warn}\""
                echo "unique_clients_crit=\"${unique_clients_crit}\""
                echo "unique_clients_warn=\"${unique_clients_warn}\""
                echo "ads_percentage_today_crit=\"${ads_percentage_today_crit}\""
                echo "ads_percentage_today_warn=\"${ads_percentage_today_warn}\""
                echo "privacy_level_crit=\"${privacy_level_crit}\""
                echo "privacy_level_warn=\"${privacy_level_warn}\""
                echo "dns_queries_today_crit=\"${dns_queries-today_crit}\""
                echo "dns_queries_today_warn=\"${dns_queries_today_warn}\""
                echo "ads_blocked_today_crit=\"${ads_blocked_today_crit}\""
                echo "ads_blocked_today_warn=\"${ads_blocked_today_warn}\""
                echo "queries_forwarded_crit=\"${queries_forwarded_crit}\""
                echo "queries_forwarded_warn=\"${queries_forwarded_warn}\""
                echo "queries_cached_crit=\"${queries_cached_crit}\""
                echo "queries_cached_warn=\"${queries_cached_warn}\""
                echo "query_A_crit=\"${query_A_crit}\""
                echo "query_A_warn=\"${query_A_warn}\""
                echo "query_AAAA_crit=\"${query_AAAA_crit}\""
                echo "query_AAAA_warn=\"${query_AAAA_warn}\""
                echo "query_ANY_crit=\"${query_ANY_crit}\""
                echo "query_ANY_warn=\"${query_ANY_warn}\""
                echo "query_DNSKEY_crit=\"${query_DNSKEY_crit}\""
                echo "query_DNSKEY_warn=\"${query_DNSKEY_warn}\""
                echo "query_DS_crit=\"${query_DS_crit}\""
                echo "query_DS_warn=\"${query_DS_warn}\""
                echo "query_HTTPS_crit=\"${query_HTTPS_crit}\""
                echo "query_HTTPS_warn=\"${query_HTTPS_warn}\""
                echo "query_MX_crit=\"${query_MX_crit}\""
                echo "query_MX_warn=\"${query_MX_warn}\""
                echo "query_NAPTR_crit=\"${query_NAPTR_crit}\""
                echo "query_NAPTR_warn=\"${query_NAPTR_warn}\""
                echo "query_NS_crit=\"${query_NS_crit}\""
                echo "query_NS_warn=\"${query_NS_warn}\""
                echo "query_OTHER_crit=\"${query_OTHER_crit}\""
                echo "query_OTHER_warn=\"${query_OTHER_warn}\""
                echo "query_PTR_crit=\"${query_PTR_crit}\""
                echo "query_PTR_warn=\"${query_PTR_warn}\""
                echo "query_RRSIG_crit=\"${query_RRSIG_crit}\""
                echo "query_RRSIG_warn=\"${query_RRSIG_warn}\""
                echo "query_SOA_crit=\"${query_SOA_crit}\""
                echo "query_SOA_warn=\"${query_SOA_warn}\""
                echo "query_SRV_crit=\"${query_SRV_crit}\""
                echo "query_SRV_warn=\"${query_SRV_warn}\""
                echo "query_SVCB_crit=\"${query_SVCB_crit}\""
                echo "query_SVCB_warn=\"${query_SVCB_warn}\""
                echo "query_TXT_crit=\"${query_TXT_crit}\""
                echo "query_TXT_warn=\"${query_TXT_warn}\""
                echo "reply_UNKNOWN_crit=\"${reply_UNKNOWN_crit}\""
                echo "reply_UNKNOWN_warn=\"${reply_UNKNOWN_warn}\""
                echo "reply_NODATA_crit=\"${reply_NODATA_crit}\""
                echo "reply_NODATA_warn=\"${reply_NODATA_warn}\""
                echo "reply_NXDOMAIN_crit=\"${reply_NXDOMAIN_crit}\""
                echo "reply_NXDOMAIN_warn=\"${reply_NXDOMAIN_warn}\""
                echo "reply_CNAME_crit=\"${reply_CNAME_crit}\""
                echo "reply_CNAME_warn=\"${reply_CNAME_warn}\""
                echo "reply_IP_crit=\"${reply_IP_crit}\""
                echo "reply_IP_warn=\"${reply_IP_warn}\""
                echo "reply_DOMAIN_crit=\"${reply_DOMAIN_crit}\""
                echo "reply_DOMAIN_warn=\"${reply_DOMAIN_warn}\""
                echo "reply_RRNAME_crit=\"${reply_RRNAME_crit}\""
                echo "reply_RRNAME_warn=\"${reply_RRNAME_warn}\""
                echo "reply_SERVFAIL_crit=\"${reply_SERVFAIL_crit}\""
                echo "reply_SERVFAIL_warn=\"${reply_SERVFAIL_warn}\""
                echo "reply_REFUSED_crit=\"${reply_REFUSED_crit}\""
                echo "reply_REFUSED_warn=\"${reply_REFUSED_warn}\""
                echo "reply_NOTIMP_crit=\"${reply_NOTIMP_crit}\""
                echo "reply_NOTIMP_warn=\"${reply_NOTIMP_warn}\""
                echo "reply_OTHER_crit=\"${reply_OTHER_crit}\""
                echo "reply_OTHER_warn=\"${reply_OTHER_warn}\""
                echo "reply_DNSSEC_crit=\"${reply_DNSSEC_crit}\""
                echo "reply_DNSSEC_warn=\"${reply_DNSSEC_warn}\""
                echo "reply_NONE_crit=\"${reply_NONE_crit}\""
                echo "reply_NONE_warn=\"${reply_NONE_warn}\""
                echo "reply_BLOB_crit=\"${reply_BLOB_crit}\""
                echo "reply_BLOB_warn=\"${reply_BLOB_warn}\""
                echo "status_crit=\"${status_crit}\""
                echo "status_warn=\"${status_warn}\""
                echo "unique_domains_crit=\"${unique_domains_crit}\""
                echo "unique_domains_warn=\"${unique_domains_warn}\""
            fi
        ;;
        "percent")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "privacy")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "privacy_level" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "queries")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_blocked_today" ] || [ "${stat}" = "queries_cached" ] || [ "${stat}" = "queries_forwarded" ] || [ "${stat}" = "dns_queries_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "queries_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "A" ] || [ "${stat}" = "AAAA" ] || [ "${stat}" = "ANY" ] || [ "${stat}" = "DNSKEY" ] || [ "${stat}" = "DS" ] || [ "${stat}" = "HTTPS" ] || [ "${stat}" = "MX" ] || [ "${stat}" = "NAPTR" ] || [ "${stat}" = "NS" ] || [ "${stat}" = "OTHER" ] || [ "${stat}" = "PTR" ] || [ "${stat}" = "RRSIG" ] || [ "${stat}" = "SOA" ] || [ "${stat}" = "SRV" ] || [ "${stat}" = "SVCB" ] || [ "${stat}" = "TXT" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "replies_by_type")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "reply_BLOB" ] || [ "${stat}" = "reply_CNAME" ] || [ "${stat}" = "reply_DNSSEC" ] || [ "${stat}" = "reply_DOMAIN" ] || [ "${stat}" = "reply_IP" ] || [ "${stat}" = "reply_NODATA" ] || [ "${stat}" = "reply_NXDOMAIN" ] || [ "${stat}" = "reply_REFUSED" ] || [ "${stat}" = "reply_RRNAME" ] || [ "${stat}" = "reply_SERVFAIL" ] || [ "${stat}" = "reply_NONE" ] || [ "${stat}" = "reply_NOTIMP" ] || [ "${stat}" = "reply_OTHER" ] || [ "${stat}" = "reply_UNKNOWN" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        "status")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "status" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    if [ "${value}" = "enabled" ]; then
                        echo "${stat}.value 1"
                    else
                        if [ "${value}" = "disabled" ]; then
                            echo "${stat}.value 0"
                        else
                            echo "${stat}.value -1"
                        fi
                    fi
                fi
            done
        ;;
        "unique_domains")
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "unique_domains" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
        *)
            for stat_id in ${get_stats}; do
                stat="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${stat}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${stat}.value ${value}"
                fi
            done
        ;;
    esac
}

plugin_suggest() {
    echo "blocked"
    echo "cache"
    echo "cache_by_type"
    echo "clients"
    echo "percent"
    echo "privacy"
    echo "queries"
    echo "queries_by_type"
    echo "replies_by_type"
    echo "status"
    echo "unique_domains"
    exit 0
}

case $1 in
    "autoconf")
        plugin_autoconf
    ;;
    "config")
        # shellcheck disable=SC2154
        plugin_config
        if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
            plugin_data
        fi
        exit 0
    ;;
    "suggest")
        plugin_suggest
    ;;
    *)
        plugin_data
        exit 0
    ;;
esac
