#!/bin/sh

# munin-pihole-plugins - pihole_
# saint-lascivious (Hayden Pearce) Â©2022

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Contact: munin-pihole-plugins@sainternet.xyz

# munin-pihole-plugins version
# must follow 8 character major.minor.micro scheme
VERSION="07.27.00"

: <<=cut
=head1 NAME

pihole_ - Munin plugins for monitoring various Pi-hole statistics.

=head1 VERSION

${VERSION}

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf,suggest

=head1 LICENSE

GNU GPLv3

=head1 APPLICABLE SYSTEMS

Systems with a default Pi-hole installation. If the Pi-hole install
is non-standard or located on another host, additional configuration
will be required.

=head1 PLUGINS

The monolithic plugin can display various different graphs depending on the munin-pihole-plugin plugin's basename or symbolic link names.

Plugin name:             Plugin description
 pihole_blocked          - Shows the number of domains blocked by Pi-hole.
 pihole_cache            - Shows Pi-hole's cache.
 pihole_cache_by_type    - Shows Pi-hole's cache by type.
 pihole_clients          - Shows clients seen by Pi-hole.
 pihole_debug            - Shows plugin debug information via commandline.
 pihole_percent          - Shows Pi-hole's blocked query percentage.
 pihole_queries          - Shows queries seen by Pi-hole.
 pihole_replies_by_type  - Shows Pi-hole replies by type.
 pihole_status           - Shows Pi-hole's blocking status.
 pihole_unique_domains   - Shows unique domains seen by Pi-hole.

Note for cache_* plugins:
Pi-hole API authentication required.
Either a Pi-hole setupVars.conf path or webpassword value must be supplied.

=head1 PLUGIN CONFIGURATION

[pihole_*]
    user root
    env.api /admin/api.php
    env.cachesuffix ?getCacheInfo&auth=
    env.host 127.0.0.1
    env.port 80
    env.setupvars /etc/pihole/setupVars.conf
    env.webpassword PIHOLE_SETUPVARS_WEBPASSWORD_HERE

Define relevant env.* variables to override the default values to suit your requirement.

=head1 AUTHOR

Copyright saint-lascivious (Hayden Pearce) 2022

=cut

#%# family=auto
#%# capabilities=autoconf suggest

api="${api:-/admin/api.php}"
cachesuffix="${cachesuffix:-?getCacheInfo&auth=}"
host="${host:-127.0.0.1}"
plugin_id="$(echo "$0" | sed -e 's/^.*pihole_//')"
port="${port:-80}"
setupvars="${setupvars:-/etc/pihole/setupVars.conf}"
if [ -f "${setupvars}" ]; then
    get_webpassword="$(cat < "${setupvars}" | grep WEBPASSWORD | sed s/WEBPASSWORD=//g)"
    webpassword="${webpassword:-${get_webpassword}}"
else
    webpassword="${webpassword:-}"
fi
apicall="$(curl -sL "${host}:${port}${api}" 2>/dev/null)"
cache_apicall="$(curl -sL "${host}:${port}${api}${cachesuffix}${webpassword}" 2>/dev/null)"

get_cachestats="$(echo "${cache_apicall}" | sed 's/[{}"]//g' | tr "," "\\n" | sort -u)"
get_stats="$(echo "${apicall}" | sed 's/[{}"]//g' | tr "," "\\n" | sort -u)"

if test "$1" = "autoconf" ; then
    if [ -x "$(command -v "curl")" ]; then
        echo no "(curl does not exist)"
        exit 0
    fi
    if test ! -f "${setupvars}"; then
        echo no "($setupvars does not exist)"
        exit 0
    fi
    echo yes
    exit 0
fi

if test "$1" = "suggest" ; then
    echo "blocked"
    echo "cache"
    echo "cache_by_type"
    echo "clients"
    echo "percent"
    echo "queries"
    echo "replies_by_type"
    echo "status"
    echo "unique_domains"
    exit 0
fi

if test "${plugin_id}"x = ""x; then
    plugin_id="percent"
fi

plugin_config() {
    case ${plugin_id} in
        "blocked")
            echo "graph_title Pi-hole domains being blocked"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel domains being blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows the number of domains blocked by Pi-hole."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "domains_being_blocked" ]; then
                    echo "${uid}.label domains being blocked"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        "cache")
            echo "graph_title Pi-hole cache"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel cache packets"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's cache."
            for stat_id in ${get_cachestats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "cache-live-freed" ] || [ "${uid}" = "cache-inserted" ] || [ "${uid}" = "expired" ] || [ "${uid}" = "immortal" ]; then
                    echo "${uid}.label $(echo "${uid}" | sed 's/-/ /g')"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        "cache_by_type")
            echo "graph_title Pi-hole cache by type"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel cache packets"
            echo "graph_total total"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's cache by type."
            for stat_id in ${get_cachestats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "ipv4" ] || [ "${uid}" = "ipv6" ] || [ "${uid}" = "srv" ] || [ "${uid}" = "cname" ] || [ "${uid}" = "ds" ] || [ "${uid}" = "dnskey" ] || [ "${uid}" = "other" ]; then
                    echo "${uid}.label $(echo "${uid}" | sed 's/ipv4/A/; s/ipv6/AAAA/; s/srv/SRV/; s/cname/CNAME/; s/ds/DS/; s/dnskey/DNSKEY/')"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        "clients")
            echo "graph_title Pi-hole clients"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel number of clients"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows clients seen by Pi-hole."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "unique_clients" ] || [ "${uid}" = "clients_ever_seen" ]; then
                    echo "${uid}.critical 100"
                    echo "${uid}.label $(echo "${uid}" | sed 's/_/ /g')"
                    echo "${uid}.min 0"
                    echo "${uid}.warning 50"
                fi
            done
        ;;
        "percent")
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_args --base 1000 -l 0 -u 100"
            echo "graph_vlabel percent blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "ads_percentage_today" ]; then
                    echo "${uid}.label percentage blocked"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.max 100"
                     echo "${uid}.min 0"
                fi
            done
        ;;
        "queries")
            echo "graph_title Pi-hole queries"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel queries"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows queries seen by Pi-hole."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "dns_queries_today" ] || [ "${uid}" = "ads_blocked_today" ] || [ "${uid}" = "queries_forwarded" ] || [ "${uid}" = "queries_cached" ]; then
                    echo "${uid}.label $(echo "${uid}" | sed 's/dns_queries_today/queries/; s/ads_blocked_today/blocked queries/; s/queries_//')"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        "replies_by_type")
            echo "graph_title Pi-hole replies by type"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel answer packets"
            echo "graph_total total"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole replies by type."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "reply_NODATA" ] || [ "${uid}" = "reply_NXDOMAIN" ] || [ "${uid}" = "reply_CNAME" ] || [ "${uid}" = "reply_IP" ]; then
                    echo "${uid}.label $(echo "${uid}" | sed 's/dns_queries_all_types/all types/; s/reply_//')"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        "status")
            echo "graph_title Pi-hole blocking status"
            echo "graph_args --base 1000 -l 0 -u 1"
            echo "graph_vlabel disabled / enabled"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocking status."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "status" ]; then
                    echo "${uid}.label blocking status"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.max 1"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        "unique_domains")
            echo "graph_title Pi-hole unique domains"
            echo "graph_args --base 1000 -l 0"
            echo "graph_vlabel unique domains"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows the unique domains seen by Pi-hole."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "unique_domains" ]; then
                    echo "${uid}.label unique domains"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.min 0"
                fi
            done
        ;;
        *)
            echo "graph_title Pi-hole blocked query percent"
            echo "graph_args --base 1000 -l 0 -u 100"
            echo "graph_vlabel percent blocked"
            echo "graph_scale no"
            echo "graph_category dns"
            echo "graph_info This graph shows Pi-hole's blocked query percentage."
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "ads_percentage_today" ]; then
                    echo "${uid}.label percentage blocked"
                    echo "${uid}.type GAUGE"
                    echo "${uid}.max 100"
                    echo "${uid}.min 0"
                fi
            done
        ;;
    esac
}

plugin_data() {
    case ${plugin_id} in
        "blocked")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "domains_being_blocked" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "cache")
            for stat_id in ${get_cachestats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "cache-live-freed" ] || [ "${uid}" = "cache-inserted" ] || [ "${uid}" = "expired" ] || [ "${uid}" = "immortal" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "cache_by_type")
            for stat_id in ${get_cachestats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "ipv4" ] || [ "${uid}" = "ipv6" ] || [ "${uid}" = "srv" ] || [ "${uid}" = "cname" ] || [ "${uid}" = "ds" ] || [ "${uid}" = "dnskey" ] || [ "${uid}" = "other" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "clients")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "unique_clients" ] || [ "${uid}" = "clients_ever_seen" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "debug")
            echo "plugin environment:"
            echo "api=\"${api}\""
            echo "cachesuffix=\"${cachesuffix}\""
            echo "host=\"${host}\""
            echo "port=\"${port}\""
            echo "setupvars=\"${setupvars}\""
            if test ! -f "${setupvars}"; then
                echo "${setupvars} exists"
            else
                echo "${setupvars} does not exist"
            fi
            echo "webpassword=\"${webpassword}\""
            echo "api calls:"
            echo "curl -sL \"${host}:${port}${api}\""
            echo "curl -sL \"${host}:${port}${api}${cachesuffix}${webpassword}\""
            echo "plugin commands:"
            if [ -x "$(command -v "curl")" ]; then
                echo "curl exists"
            else
                echo "curl does not exist"
            fi
            echo "contact:"
            echo "munin-pihole-plugins.sainternet.xyz"
        ;;
        "percent")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "queries")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "dns_queries_today" ] || [ "${uid}" = "ads_blocked_today" ] || [ "${uid}" = "queries_forwarded" ] || [ "${uid}" = "queries_cached" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "replies_by_type")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "reply_NODATA" ] || [ "${uid}" = "reply_NXDOMAIN" ] || [ "${uid}" = "reply_CNAME" ] || [ "${uid}" = "reply_IP" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        "status")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "status" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    if [ "${value}" = "enabled" ]; then
                        echo "${uid}.value 1"
                    else
                        if [ "${value}" = "disabled" ]; then
                            echo "${uid}.value 0"
                        fi
                    fi
                fi
            done
        ;;
        "unique_domains")
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "unique_domains" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
        *)
            for stat_id in ${get_stats}; do
                uid="$(echo "${stat_id}" | sed 's/:.*//')"
                if [ "${uid}" = "ads_percentage_today" ]; then
                    value="$(echo "${stat_id}" | sed 's/.*://')"
                    echo "${uid}.value ${value}"
                fi
            done
        ;;
    esac
}


case $1 in
    "config")
        plugin_config
        if [ "$MUNIN_CAP_DIRTYCONFIG" = "1" ]; then
            plugin_data
        fi
        exit 0
    ;;
    *)
        plugin_data
        exit 0
    ;;
esac
