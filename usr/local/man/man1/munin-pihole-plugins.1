.TH man 1 "11 October 2022" "07.09.00" "munin-pihole-plugins man page"

.SH NAME
munin-pihole-plugins

.SH VERSION
07.09.00

.SH BRANCH
master

.SH DESCRIPTION
Munin plugins and management script for monitoring various Pi-holeÂ® statistics.

Transforms a server into a powerful monitoring platform.

.SH OPTIONS
Usage: munin-pihole-plugins {OPTION [PARAMETER]}

Option             GNU long option      Function
 -c, configure      --configure          Display or set environment variables
 -d, debug          --debug              Install and run the debug plugin
 -h, help           --help               Display this and other help dialogues
 -i, install        --install            Install munin-pihole-plugins
 -r, restart        --restart            Restart munin-pihole-plugins services
 -s, show           --show               Display GNU GPLv3 license information
 -u, uninstall      --uninstall          Uninstall munin-pihole-plugins
 -v, version        --version            Display current and latest versions

Type "./munin-pihole-plugins --help {OPTION [PARAMETER]}" for more detailed
explanations of each command.

Example: "munin-pihole-plugins --help --install --plugins"

.SS -c, configure, --configure
Usage: munin-pihole-plugins {--configure [RESET_ALL]|[VARIABLE [VALUE]]}

Option             GNU long option      Function
 -c, configure      --configure          Display or set environment variables

Display a full list of environment variables used by the munin-pihole-plugins
script, and their current values. These variables and this command can be used
to customize various aspects of the munin-pihole-plugins script's operation.

Takes an optional parameter in the form of a munin-pihole-plugins environment
variable to list the value of that variable alone.

Example: "munin-pihole-plugins --configure INSTALL_PLUGINS"

Takes an optional value for a munin-pihole-plugins environment variable to
set the value of that variable. If the optional value passed is 'RESET', the
corresponding environment variable will be reset to its default value. This
functionality is only available if the munin-pihole-plugins script is found to
exist within 'SCRIPT_DIR'.

Examples: "munin-pihole-plugins --configure DNS_SERVER 127.0.0.1"
          "munin-pihole-plugins --configure DNS_SERVER RESET"

Takes an optional parameter in the form of 'RESET_ALL' to restore all
munin-pihole-plugins environment variables to their default values. Again,
this functionality is only available if the munin-pihole-plugins script is
found to exist within 'SCRIPT_DIR', whereby it's considered "installed".

Example: "munin-pihole-plugins --configure RESET_ALL"

.SS -d, debug, --debug
Usage: munin-pihole-plugins {--debug}

Option             GNU long option      Function
 -d, debug          --debug              Install and run the debug plugin

Install and run the debug plugin to examine the current plugin environment.
The plugin is executed once using "munin-run" and then removed afterward.

Note: This plugin does not configure or produce any graph.

Example: "munin-pihole-plugins --debug"

.SS -h, help, --help
Usage: munin-pihole-plugins --help {OPTION[PARAMETER]}

Option             GNU long option      Function
 -h, help           --help               Display this and other help dialogues

Display simple or detailed munin-pihole-plugins help information.
Type "./munin-pihole-plugins --help {OPTION [PARAMETER]}" for more detailed
explanations of each command.

Example: "munin-pihole-plugins --help --install --plugins"

.SS -i, install, --install
Usage: munin-pihole-plugins {--install [PARAMETER]}

Option             GNU long option      Function
 -i, install        --install            Install munin-pihole-plugins

Install and configure Munin monitoring server software (default: true), client
software (default: true), selected munin-pihole-plugins plugins (default: all)
and install a copy of the munin-pihole-plugins script (default: true) to a
selected directory (default: /usr/local/bin).

The munin-pihole-plugins script will self update (default: true) before install
if a newer version of the munin-pihole-plugins script is available.

You can run the installation again at any time afterwards to update the
munin-pihole-plugins script and plugins, optionally selecting which plugins to
install using the PLUGIN_LIST variable.

Takes an optional parameter to install just that component.

Parameter          GNU long parameter   Function
 -p, plugins        --plugins            Install and configure munin-node, and
                                         munin-pihole-plugins plugins
 -P, plugins-only   --plugins-only       As above, skipping dependency check
 -s, script         --script             Install the munin-pihole-plugins
                                         script
 -S, script-only    --script-only        As above, skipping dependency check
 -w, webserver      --webserver          Install and configure munin, lighttpd
                                         and lighttpd-external-munin-proxy
 -W, webserver-only --webserver-only     As above, skipping dependency check

Example: "munin-pihole-plugins --install --plugins"

.SS -r, restart, --restart
Usage: munin-pihole-plugins {--restart [PARAMETER]}

Option             GNU long option      Function
 -r, restart        --restart            Restart munin-pihole-plugins services

Restart any/all services relevant to munin-pihole-plugins.

The list of services to restart is governed by the states of the "INSTALL_*"
environment/external configuration variables, all of which default "true".

Takes an optional parameter to restart only those services involved with
that munin-pihole-plugins component.

Parameter          GNU long parameter   Function
 -p, plugins        --plugins            Restart the munin-node service
 -w, webserver      --webserver          Restart both the munin and lighttpd
                                         services

Example: "munin-pihole-plugins --restart"

.SS -s, show, --show
Usage: munin-pihole-plugins {--show OPTION}

Option             GNU long option      Function
 -s, show           --show               Display GNU GPLv3 license information

Option             GNU long option      Function
 -c, conditions     --conditions         Show GNU GPLv3 licensing conditions
 -g, gnu-gpl        --gnu-gpl            Show full GNU GPL v3 license text
                                         (less/more terminal paginator required)
 -l, liability      --liability          Show liability definition
 -w, warranty       --warranty           Show warranty information

Example: "munin-pihole-plugins --show --warranty"

.SS -u, uninstall, --uninstall
Usage: munin-pihole-plugins {--uninstall [PARAMETER]}

Option             GNU long option      Function
 -u, uninstall       --uninstall         Uninstall munin-pihole-plugins

Completely uninstall munin-pihole-plugins, you will be asked if you want to
uninstall any dependencies that munin-pihole-plugins may have installed.

Takes an optional parameter to uninstall just that component.

Parameter          GNU long parameter   Function
 -p, plugins        --plugins            Uninstall munin-node, and
                                         munin-pihole-plugins plugins
 -P, plugins-only   --plugins-only       As above, skipping dependency removal
 -s, script         --script             Uninstall the munin-pihole-plugins
                                         script
 -S, script-only    --script-only        As above, skipping dependency removal
 -w, webserver      --webserver          Uninstall munin, lighttpd, and
                                         lighttpd-external-munin-proxy
 -W, webserver-only --webserver-only     As above, skipping dependency removal

Example: "munin-pihole-plugins --uninstall --script-only"

.SS -v, version, --version
Usage: munin-pihole-plugins {--version}

Option             GNU long option      Function
 -v, version        --version            Display current and latest versions

Display the current munin-pihole-plugins script version, and compare it to
the latest munin-pihole-plugins script version.

An additional notification will be displayed if an update is available.

.SH PLUGINS
Can be used to present various different graphs depending on the plugin's base or symbolic link name. Defaults to pihole_percent.

Plugin name:             Plugin description
 pihole_blocked          - Shows the number of domains blocked by Pi-hole.
 pihole_cache            - Shows Pi-hole's cache.
 pihole_cache_by_type    - Shows Pi-hole's cache by type.
 pihole_clients          - Shows clients seen by Pi-hole.
 pihole_percent          - Shows Pi-hole's blocked query percentage.
 pihole_privacy          - Shows Pi-hole's privacy level.
 pihole_queries          - Shows queries seen by Pi-hole.
 pihole_replies_by_type  - Shows Pi-hole replies by type.
 pihole_status           - Shows Pi-hole's blocking status.
 pihole_unique_domains   - Shows unique domains seen by Pi-hole.

Note for cache_* plugins:
Pi-hole API authentication required.
Either a Pi-hole setupVars.conf path or webpassword value must be supplied.

.SH PLUGIN CONFIGURATION
Default /etc/munin/plugin-conf.d/pihole.conf plugin configuration:

---
[pihole_*]

    user root

    env.api_method telnet
    env.ftl_conf /etc/pihole/pihole-FTL.conf
    #env.ftl_port 4711
    env.host 127.0.0.1
    env.json_api /admin/api.php
    env.json_cachesuffix ?getCacheInfo&auth=
    env.json_port 80
    env.json_querysuffix ?getQueryTypes&auth=
    env.setupvars /etc/pihole/setupVars.conf
    #env.webpassword PIHOLE_SETUPVARS_WEBPASSWORD_HERE

    env.graph_category dns
    env.graph_height 200
    env.graph_scale no
    env.graph_type GAUGE
    env.graph_width 400

    # pihole_blocked
    env.blocked_rate 3600
    env.domains_being_blocked_crit 1:5000000
    env.domains_being_blocked_warn 0:3000000

    # pihole_cache
    #env.cache_rate
    #env.cache_expired_crit
    #env.cache_expired_warn
    #env.cache_immortal_crit
    #env.cache_immortal_warn
    #env.cache_inserted_crit
    #env.cache_inserted_warn
    #env.cache_live_freed_crit
    #env.cache_live_freed_warn
    env.cache_size_crit 1:10000
    env.cache_size_warn 10000:10000

    # pihole_cache_by_type
    #env.cache_by_type_rate
    #env.cache_A_crit
    #env.cache_A_warn
    #env.cache_AAAA_crit
    #env.cache_AAAA_warn
    #env.cache_CNAME_crit
    #env.cache_CNAME_warn
    #env.cache_DNSKEY_crit
    #env.cache_DNSKEY_warn
    #env.cache_DS_crit
    #env.cache_DS_warn
    #env.cache_OTHER_crit
    #env.cache_OTHER_warn
    #env.cache_SRV_crit
    #env.cache_SRV_warn

    # pihole_clients
    #env.clients_rate
    #env.clients_ever_seen_crit
    #env.clients_ever_seen_warn
    env.unique_clients_crit 100
    env.unique_clients_warn 1:50

    # pihole_percent
    #env.percent_rate
    env.ads_percentage_today_crit 95
    env.ads_percentage_today_warn 1:85

    # pihole_privacy
    #env.privacy_rate
    env.privacy_level_crit 1:3
    env.privacy_level_warn 3:3

    # pihole_queries
    #env.queries_rate
    #env.dns_queries_today_crit
    #env.dns_queries_today_warn
    #env.ads_blocked_today_crit
    #env.ads_blocked_today_warn
    #env.queries_forwarded_crit
    #env.queries_forwarded_warn
    #env.queries_cached_crit
    #env.queries_cached_warn

    # pihole_queries_by_type
    #env.queries_by_type_rate
    #env.query_A_crit
    #env.query_AAAA_warn
    #env.query_ANY_crit
    #env.query_ANY_warn
    #env.query_DNSKEY_crit
    #env.query_DNSKEY_warn
    #env.query_DS_crit
    #env.query_DS_warn
    #env.query_HTTPS_crit
    #env.query_HTTPS_warn
    #env.query_MX_crit
    #env.query_MX_warn
    #env.query_NAPTR_crit
    #env.query_NAPTR_warn
    #env.query_NS_crit
    #env.query_NS_warn
    #env.query_OTHER_crit
    #env.query_OTHER_warn
    #env.query_PTR_crit
    #env.query_PTR_warn
    #env.query_RRSIG_crit
    #env.query_RRSIG_warn
    #env.query_SOA_crit
    #env.query_SOA_warn
    #env.query_SRV_crit
    #env.query_SRV_warn
    #env.query_SVCB_crit
    #env.query_SVCB_warn
    #env.query_TXT_crit
    #env.query_TXT_warn

    # pihole_replies_by_type
    #env.replies_by_type_rate
    #env.reply_BLOB_crit
    #env.reply_BLOB_warn
    #env.reply_CNAME_crit
    #env.reply_CNAME_warn
    #env.reply_DNSSEC_crit
    #env.reply_DNSSEC_warn
    #env.reply_DOMAIN_crit
    #env.reply_DOMAIN_warn
    #env.reply_IP_crit
    #env.reply_IP_warn
    #env.reply_NOTIMP_crit
    #env.reply_NOTIMP_warn
    #env.reply_NODATA_crit
    #env.reply_NODATA_warn
    #env.reply_NONE_crit
    #env.reply_NONE_warn
    #env.reply_NXDOMAIN_crit
    #env.reply_NXDOMAIN_warn
    #env.reply_OTHER_crit
    #env.reply_OTHER_warn
    #env.reply_REFUSED_crit
    #env.reply_REFUSED_warn
    #env.reply_RRNAME_crit
    #env.reply_RRNAME_warn
    #env.reply_SERVFAIL_crit
    #env.reply_SERVFAIL_warn
    #env.reply_UNKNOWN_crit
    #env.reply_UNKNOWN_warn

    # pihole_status
    #env.status_rate
    env.status_crit 0:1
    env.status_warn 1:1

    # pihole_unique_domains
    #env.unique_domains_rate
    env.unique_domains_crit 1:20000
    env.unique_domains_warn 0:10000
---

Uncomment and/or (re-)define relevant env.* variables to override the default values to suit your requirement.

The graph_category value determines which category munin-pihole-plugins graphs will appear in Munin's interface. This value MUST be lower case, allowed characters [a-z0-9].

The graph_scale value determines graph y axis value scaling and may be either "no" or "yes".

The graph_type value determines the graph data type, and can be one of "ABSOLUTE", "COUNTER", "DERIVE", or "GAUGE". This value MUST be upper case.

The values for *_rate is a value in seconds. E.g. "60", "300", "3600".

The values for *_crit and *_warn can be a max value or a range separated by colon. E.g. "min:", ":max", "min:max", "max".

The values for graph_height and graph_width specify the dimensions of the graph in pixels, not including the graph legend.

More specific definitions will override less specific definitions, allowing for a very high degree of customisation on a per-plugin basis. For example:

---
[pihole_*]
    env.graph_category pihole

[pihole_clients]
    env.graph_type COUNTER

[pihole_replies_by_type]
    env.graph_type DERIVE
---

.SH SCRIPT CONFIGURATION
Variable                       Default Value
 BRANCH                         "master"
 DNS_PORT                       "53"
 DNS_SERVER                     "208.67.222.222" (OPENDNS)
 EXTERNAL_CONFIG_DIR            "/etc/munin-pihole-plugins"
 EXTERNAL_CONFIG_FILE           "munin-pihole-plugins.conf"
 FORCE_UPDATE_PLUGIN_CONFIG     "false"
 HOLD_DURATION                  "0"
 IGNORE_PIHOLE_ON_HOST          "false"
 INSTALL_PLUGINS                "true"
 INSTALL_SCRIPT                 "true"
 INSTALL_WEBSERVER              "true"
 LIGHTTPD_WEBROOT               "/var/www/html"
 MUNIN_BRANCH                   "stable"
 MUNIN_DIR                      "/etc/munin"
 MUNIN_CONFIG_DIR               "/etc/munin/munin-conf.d"
 MUNIN_PLUGIN_DIR               "/usr/share/munin/plugins"
 NODE_PLUGIN_DIR                "/etc/munin/plugins"
 PLUGIN_CONFIG_DIR              "/etc/munin/plugin-conf.d"
 PLUGIN_LIST                    "blocked cache cache_by_type clients percent privacy queries replies_by_type status unique_domains"
 PROXY_CONFIG_DIR               "/etc/lighttpd"
 SCRIPT_DIR                     "/usr/local/bin"
 SHOW_COLOUR                    "true"
 SHOW_HEADER                    "true"
 SKIP_DEPENDENCY_CHECK          "false"
 UPDATE_SELF                    "true"
 VERBOSITY_LEVEL                "3"

.SS BRANCH

The branch used when checking the munin-pihole-plugins script version or installing munin-pihole-plugins. Valid options are development and master, of which the default is master. Invalid options will be rejected.

Example munin-pihole-plugins --configure BRANCH development

.SS DNS_PORT

The port which the munin-pihole-plugins script will use in order to contact DNS_SERVER.

Example munin-pihole-plugins --configure DNS_PORT 53

.SS DNS_SERVER

The DNS server which the munin-pihole-plugins script will contact in order to retrieve its version information (from a TXT record at munin-pihole-plugins.sainternet.xyz). This SHOULD be an IP address rather than a hostname or FQDN when configured manually, and it SHOULD be external. When configured via -c, -configure, --configure this value MUST be an IPv4 address.

When the munin-pihole-plugins script is installed locally, the -c, configure, --configure command can set the value of DNS_SERVER using user input, or one of the following optional presets:

DNS_SERVER Preset   Value

CLOUDFLARE          1.1.1.1
COMODO              8.26.56.26
GOOGLE              8.8.8.8
LOCALHOST           127.0.0.1
OPENDNS             208.67.222.222 (default)
QUAD9               9.9.9.9
SAINTERNET          119.224.127.171

Example: munin-pihole-plugins --configure DNS_SERVER LOCALHOST

If this server is operating on a port other than 53 (default), you can change this using the DNS_PORT variable.

.SS EXTERNAL_CONFIG_DIR

The directory in which an external configuration file should be located, to be created if required.

Example: munin-pihole-plugins --configure EXTERNAL_CONFIG_DIR "/etc/munin-pihole-plugins"

.SS EXTERNAL_CONFIG_FILE

The name of external configuration file munin-pihole-plugins should use, to be created if required.

Example: munin-pihole-plugins --configure EXTERNAL_CONFIG_FILE "munin-pihole-plugins.conf"

.SS FORCE_UPDATE_PLUGIN_CONFIG

Forces the re-installation of the default munin-pihole-plugins plugin configuration file pihole.conf (default: false), which changes periodically. If the configured external configuration directory exists, the currently installed plugin configuration will be saved to the EXTERNAL_CONFIG_DIR as pihole.conf.save before being overwritten.

Example: munin-pihole-plugins --configure FORCE_UPDATE_PLUGIN_CONFIG true

.SS HOLD_DURATION

Sets the dwell time on a scale from 0 to 5 seconds (default: 0) which the munin-pihole-plugins script should wait between outputting user information, allowing the user to see what's happening more easily.

Example: munin-pihole-plugins --configure HOLD_DURATION 2

Note: Somewhat of an oddity this one. Added upon user request (I'm happy to accomodate), to help prevent the munin-pihole-plugins script output from "whizzing by too fast to be seen", which might normally be considered a good thing. The maximum value is capped at five seconds, which doesn't seem like very much at all but (depending on the VERBOSITY_LEVEL will slow things down considerably.

.SS IGNORE_PIHOLE_ON_HOST

Ignore the existance of any potentially incompatible (â¥ v6.*) pihole binary on the host server. Potentially required under some (albeit unusual and unlikely) circumstances.

Example: munin-pihole-plugins --configure IGNORE_PIHOLE_ON_HOST true

.SS INSTALL_PLUGINS

Disables installation of munin-node and munin-pihole-plugins plugins if set to any value other than true.

Example munin-pihole-plugins --configure INSTALL_PLUGINS false

.SS INSTALL_SCRIPT

Disables installation of the munin-pihole-plugins script if set to any value other than true.

Example munin-pihole-plugins --configure INSTALL_SCRIPT false

.SS INSTALL_WEBSERVER

Disables installation of the munin webserver and lighttpd proxy if set to any value other than true. Useful for additional Munin nodes in a multi-node, single-server environment.

Example munin-pihole-plugins --configure INSTALL_WEBSERVER false

.SS LIGHTTPD_WEBROOT

The directory in which, if installed, the Pi-holeÂ® AdminLTE web interface should be found. The presence or absence of a pihole directory here is used to determine whether or not munin-pihole-plugins should offer to remove lighttpd during munin-pihole-plugins uninstallation. The admin directory is not used for this purpose due to the ambiguity of its name.

Example munin-pihole-plugins --configure LIGHTTPD_WEBROOT "/var/www/html"

.SS MUNIN_BRANCH

The Munin branch to target when configuring the lighttpd proxy. Available options are latest and stable, with stable being the default value. The latest branch should be selected for Munin versions 2.99 or higher.

Tag     Munin Version Target

latest  munin 2.99+
stable  munin 2.*

Example munin-pihole-plugins --configure MUNIN_BRANCH latest

.SS MUNIN_DIR

The directory in which the munin munin.conf file should be located.

Example munin-pihole-plugins --configure MUNIN_DIR "/etc/munin"

.SS MUNIN_CONFIG_DIR

The directory in which additional munin configuration files may be placed, the munin-pihole-plugins script will attempt to use this in favour of editing munin.conf directly.

Example munin-pihole-plugins --configure MUNIN_CONFIG_DIR "/etc/munin/munin-conf.d"

.SS MUNIN_PLUGIN_DIR

The directory in which munin plugins should be located.

Example munin-pihole-plugins --configure MUNIN_PLUGIN_DIR "/usr/share/munin/plugins"

.SS NODE_PLUGIN_DIR

The directory in which munin-node plugin symbolic links should be created.

Example munin-pihole-plugins --configure NODE_PLUGIN_DIR "/etc/munin/plugins"

.SS PLUGIN_CONFIG_DIR

The directory in which individual munin-node plugin configurations should be located.

Example munin-pihole-plugins --configure PLUGIN_CONFIG_DIR "/etc/munin/plugin-conf.d"

.SS PLUGIN_LIST

A space separated list of munin-pihole-plugins plugin IDs used to determine which plugins will be installed.

Plugin ID       Plugin Name             Description

blocked         pihole_blocked          This plugin shows the number of domains blocked by Pi-holeÂ®. |
cache           pihole_cache            This plugin shows Pi-holeÂ®'s cache. |
cache_by_type   pihole_cache_by_type    This plugin shows Pi-holeÂ®'s cache by type. |
clients         pihole_clients          This plugin shows clients seen by Pi-holeÂ®. |
percent         pihole_percent          This plugin shows Pi-holeÂ®'s blocked query percentage. |
privacy         pihole_privacy          This plugin shows Pi-holeÂ®'s [privacy level](https://docs.pi-hole.net/ftldns/privacylevels/). |
queries         pihole_queries          This plugin shows queries seen by Pi-holeÂ®. |
queries_by_type pihole_queries_by_type  This plugin shows Pi-holeÂ®'s queries by type. |
replies_by_type pihole_replies_by_type  This plugin shows Pi-holeÂ®'s replies by type. |
status          pihole_status           This plugin shows Pi-holeÂ®'s blocking status. |
unique_domains  pihole_unique_domains   This plugin shows unique domains seen by Pi-holeÂ®. |

Example: munin-pihole-plugins --configure PLUGIN_LIST "blocked percent unique_domains"

.SS PROXY_CONFIG_DIR

The directory in which lighttpd's external.conf should be located.

Example munin-pihole-plugins --configure PROXY_CONFIG_DIR "/etc/lighttpd"

.SS SCRIPT_DIR

The directory in which the munin-pihole-plugins script should be located when installed, the munin-pihole-plugins script will warn if this directory is not located in the host's $PATH variable and suggest how to correct this.

Example munin-pihole-plugins --configure SCRIPT_DIR "/etc/munin-pihole-plugins"

.SS SHOW_COLOUR

Disables coloured terminal output if set to any value other than true.

Example munin-pihole-plugins --configure SHOW_COLOUR false

.SS SHOW_HEADER

I get it. It's not for everyone.

Disables the (super-duper, totally awesome) munin-pihole-plugins script ascii header if set to any value other than true.

Example munin-pihole-plugins --configure SHOW_HEADER false

.SS SKIP_DEPENDENCY_CHECK

Disables apt and dpkg-query based dependency management if set to any value other than false.

Example munin-pihole-plugins --configure SKIP_DEPENDENCY_CHECK true

Note: Basic test-before-use for required binaries is still performed in either case.

.SS UPDATE_SELF

Disables self update of the munin-pihole-plugins script if set to any value other than true.

Example munin-pihole-plugins --configure UPDATE_SELF false

.SS VERBOSITY_LEVEL

Sets the munin-pihole-plugins script verbosity level on a scale from 0 to 4, with 0 being total silence and 4 being the highest level of verbosity.

Verbosity Level     Output

0                   Silent
1                   + Errors
2                   ++ Questions and Warnings
3                   +++ Information
4                   ++++ Additional Information

Example: munin-pihole-plugins --configure VERBOSITY_LEVEL 4

.SH Munin Node Configuration
Example /etc/munin/munin-node.conf multi-server, multi-node access control configuration

# Set this if the client doesn't report the correct hostname when
# telnetting to localhost, port 4949

host_name primary.home

# A list of addresses that are allowed to connect.  This must be a
# regular expression, since Net::Server does not understand CIDR-style
# network notation unless the perl module Net::CIDR is installed.  You
# may repeat the allow line as many times as you'd like

allow ^127\.0\.0\.1$
allow ^::1$

# If you have installed the Net::CIDR perl module, you can use one or more
# cidr_allow and cidr_deny address/mask patterns.  A connecting client must
# match any cidr_allow, and not match any cidr_deny.  Note that a netmask
# *must* be provided, even if it's /32

# primary.home
cidr_allow 192.168.1.10/32
# secondary.home
cidr_allow 192.168.1.20/32
# desktop.home
cidr_allow 192.168.1.40/32
# laptop.home
cidr_allow 192.168.1.100/32


.SH Munin Server Configuration
Example /etc/munin/munin.conf or /etc/munin/munin-conf.d/00-nodes.conf multi-server, multi-node access control configuration

# primary.home
[primary.home]
    address 192.168.1.10
    use_node_name yes

# secondary.home
[secondary.home]
    address 192.168.1.20
    use_node_name yes

# desktop.home
[desktop.home]
    address 192.168.1.40
    use_node_name yes

# laptop.home
[laptop.home]
    address 192.168.1.100
    use_node_name yes

.SH SEE ALSO
munin(8), munin-node(1p)

.SH BUGS
 - Plugin not working with remote docker PiHole instance
   https://github.com/saint-lascivious/munin-pihole-plugins/issues/6

.SH LICENSE
GNU GPL v3.0 (https://www.gnu.org/licenses/gpl-3.0-standalone.html)

.SH SOURCE
munin-pihole-plugins on GitHub (https://github.com/saint-lascivious/munin-pihole-plugins)

.SH AUTHOR
saint-lascivious (Hayden Pearce), Â©2022

.SH CONTACT
munin-pihole-plugins@sainternet.xyz
