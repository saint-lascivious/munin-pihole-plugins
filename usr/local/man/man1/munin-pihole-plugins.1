.TH man 1 "22 August 2022" "08.01.00" "munin-pihole-plugins man page"

.SH NAME
munin-pihole-plugins

.SH VERSION
08.01.00

.SH BRANCH
development

.SH DESCRIPTION
Munin plugins and management script for monitoring various Pi-holeÂ® statistics.

Transforms a server into a powerful monitoring platform.

.SH OPTIONS
Usage: munin-pihole-plugins {OPTION [PARAMETER]}

Option             GNU long option      Function
 -c, configure      --configure          Display or set environment variables
 -d, debug          --debug              Install and run the debug plugin
 -h, help           --help               Display this and other help dialogues
 -i, install        --install            Install munin-pihole-plugins
 -r, restart        --restart            Restart munin-pihole-plugins services
 -s, show           --show               Display GNU GPLv3 license information
 -u, uninstall      --uninstall          Uninstall munin-pihole-plugins
 -v, version        --version            Display current and latest versions

Type "./munin-pihole-plugins --help {OPTION [PARAMETER]}" for more detailed
explanations of each command.

Example: "munin-pihole-plugins --help --install --plugins"

.SS -c, configure, --configure
Usage: munin-pihole-plugins {--configure [RESET_ALL]|[VARIABLE [VALUE]]}

Option             GNU long option      Function
 -c, configure      --configure          Display or set environment variables

Display a full list of environment variables used by the munin-pihole-plugins
script, and their current values. These variables and this command can be used
to customize various aspects of the munin-pihole-plugins script's operation.

Takes an optional parameter in the form of a munin-pihole-plugins environment
variable to list the value of that variable alone.

Example: "munin-pihole-plugins --configure INSTALL_PLUGINS"

Takes an optional value for a munin-pihole-plugins environment variable to
set the value of that variable. If the optional value passed is 'RESET', the
corresponding environment variable will be reset to its default value. This
functionality is only available if the munin-pihole-plugins script is found to
exist within 'SCRIPT_DIR'.

Examples: "munin-pihole-plugins --configure DNS_SERVER 127.0.0.1"
          "munin-pihole-plugins --configure DNS_SERVER RESET"

Takes an optional parameter in the form of 'RESET_ALL' to restore all
munin-pihole-plugins environment variables to their default values. Again,
this functionality is only available if the munin-pihole-plugins script is
found to exist within 'SCRIPT_DIR', whereby it's considered "installed".

Example: "munin-pihole-plugins --configure RESET_ALL"

.SS -d, debug, --debug
Usage: munin-pihole-plugins {--debug}

Option             GNU long option      Function
 -d, debug          --debug              Install and run the debug plugin

Install and run the debug plugin to examine the current plugin environment.
The plugin is executed once using "munin-run" and then removed afterward.

Note: This plugin does not configure or produce any graph.

Example: "munin-pihole-plugins --debug"

.SS -h, help, --help
Usage: munin-pihole-plugins --help {OPTION[PARAMETER]}

Option             GNU long option      Function
 -h, help           --help               Display this and other help dialogues

Display simple or detailed munin-pihole-plugins help information.
Type "./munin-pihole-plugins --help {OPTION [PARAMETER]}" for more detailed
explanations of each command.

Example: "munin-pihole-plugins --help --install --plugins"

.SS -i, install, --install
Usage: munin-pihole-plugins {--install [PARAMETER]}

Option             GNU long option      Function
 -i, install        --install            Install munin-pihole-plugins

Install and configure Munin monitoring server software (default: true), client
software (default: true), selected munin-pihole-plugins plugins (default: all)
and install a copy of the munin-pihole-plugins script (default: true) to a
selected directory (default: /usr/local/bin).

The munin-pihole-plugins script will self update (default: true) before install
if a newer version of the munin-pihole-plugins script is available.

You can run the installation again at any time afterwards to update the
munin-pihole-plugins script and plugins, optionally selecting which plugins to
install using the PLUGIN_LIST variable.

Takes an optional parameter to install just that component.

Parameter          GNU long parameter   Function
 -p, plugins        --plugins            Install and configure munin-node, and
                                         munin-pihole-plugins plugins
 -P, plugins-only   --plugins-only       As above, skipping dependency check
 -s, script         --script             Install the munin-pihole-plugins
                                         script
 -S, script-only    --script-only        As above, skipping dependency check
 -w, webserver      --webserver          Install and configure munin, lighttpd
                                         and lighttpd-external-munin-proxy
 -W, webserver-only --webserver-only     As above, skipping dependency check

Example: "munin-pihole-plugins --install --plugins"

.SS -r, restart, --restart
Usage: munin-pihole-plugins {--restart [PARAMETER]}

Option             GNU long option      Function
 -r, restart        --restart            Restart munin-pihole-plugins services

Restart any/all services relevant to munin-pihole-plugins.

The list of services to restart is governed by the states of the "INSTALL_*"
environment/external configuration variables, all of which default "true".

Takes an optional parameter to restart only those services involved with
that munin-pihole-plugins component.

Parameter          GNU long parameter   Function
 -p, plugins        --plugins            Restart the munin-node service
 -w, webserver      --webserver          Restart both the munin and lighttpd
                                         services

Example: "munin-pihole-plugins --restart"

.SS -s, show, --show
Usage: munin-pihole-plugins {--show OPTION}

Option             GNU long option      Function
 -s, show           --show               Display GNU GPLv3 license information

Option             GNU long option      Function
 -c, conditions     --conditions         Show GNU GPLv3 licensing conditions
 -g, gnu-gpl        --gnu-gpl            Show full GNU GPL v3 license text
                                         (less/more terminal paginator required)
 -l, liability      --liability          Show liability definition
 -w, warranty       --warranty           Show warranty information

Example: "munin-pihole-plugins --show --warranty"

.SS -u, uninstall, --uninstall
Usage: munin-pihole-plugins {--uninstall [PARAMETER]}

Option             GNU long option      Function
 -u, uninstall       --uninstall         Uninstall munin-pihole-plugins

Completely uninstall munin-pihole-plugins, you will be asked if you want to
uninstall any dependencies that munin-pihole-plugins may have installed.

Takes an optional parameter to uninstall just that component.

Parameter          GNU long parameter   Function
 -p, plugins        --plugins            Uninstall munin-node, and
                                         munin-pihole-plugins plugins
 -P, plugins-only   --plugins-only       As above, skipping dependency removal
 -s, script         --script             Uninstall the munin-pihole-plugins
                                         script
 -S, script-only    --script-only        As above, skipping dependency removal
 -w, webserver      --webserver          Uninstall munin, lighttpd, and
                                         lighttpd-external-munin-proxy
 -W, webserver-only --webserver-only     As above, skipping dependency removal

Example: "munin-pihole-plugins --uninstall --script-only"

.SS -v, version, --version
Usage: munin-pihole-plugins {--version}

Option             GNU long option      Function
 -v, version        --version            Display current and latest versions

Display the current munin-pihole-plugins script version, and compare it to
the latest munin-pihole-plugins script version.

An additional notification will be displayed if an update is available.

.SH PLUGINS
Can be used to present various different graphs depending on the plugin's base or symbolic link name. Defaults to pihole_percent.

Plugin name:             Plugin description
 pihole_blocked          - Shows the number of domains blocked by Pi-hole.
 pihole_cache            - Shows Pi-hole's cache.
 pihole_cache_by_type    - Shows Pi-hole's cache by type.
 pihole_clients          - Shows clients seen by Pi-hole.
 pihole_percent          - Shows Pi-hole's blocked query percentage.
 pihole_queries          - Shows queries seen by Pi-hole.
 pihole_replies_by_type  - Shows Pi-hole replies by type.
 pihole_status           - Shows Pi-hole's blocking status.
 pihole_unique_domains   - Shows unique domains seen by Pi-hole.

Note for cache_* plugins:
Pi-hole API authentication required.
Either a Pi-hole setupVars.conf path or webpassword value must be supplied.

.SH CONFIGURATION
.SS PLUGIN CONFIGURATION
Default /etc/munin/plugin-conf.d/pihole.conf plugin configuration.

[pihole_*]
    user root
    env.api /admin/api.php
    env.cachesuffix ?getCacheInfo&auth=
    env.host 127.0.0.1
    env.port 80
    env.setupvars /etc/pihole/setupVars.conf
    #env.webpassword PIHOLE_SETUPVARS_WEBPASSWORD_HERE

.SS SCRIPT CONFIGURATION
Variable                 Default Value
 BRANCH                   "development"
 DNS_PORT                 "53"
 DNS_SERVER               "208.67.222.222" (OPENDNS)
 EXTERNAL_CONFIG_DIR      "/etc/munin-pihole-plugins"
 EXTERNAL_CONFIG_FILE     "munin-pihole-plugins.conf"
 HOLD_DURATION            "0"
 IGNORE_PIHOLE_ON_HOST    "false"
 INSTALL_PLUGINS          "true"
 INSTALL_SCRIPT           "true"
 INSTALL_WEBSERVER        "true"
 LIGHTTPD_WEBROOT         "/var/www/html"
 MUNIN_BRANCH             "stable"
 MUNIN_DIR                "/etc/munin"
 MUNIN_CONFIG_DIR         "/etc/munin/munin-conf.d"
 MUNIN_PLUGIN_DIR         "/usr/share/munin/plugins"
 NODE_PLUGIN_DIR          "/etc/munin/plugins"
 PLUGIN_CONFIG_DIR        "/etc/munin/plugin-conf.d"
 PLUGIN_LIST              "blocked cache cache_by_type clients percent queries replies_by_type status unique_domains"
 PROXY_CONFIG_DIR         "/etc/lighttpd"
 SCRIPT_DIR               "/usr/local/bin"
 SHOW_COLOUR              "true"
 SHOW_HEADER              "true"
 SKIP_DEPENDENCY_CHECK    "false"
 UPDATE_SELF              "true"
 VERBOSITY_LEVEL          "3"

.SS Munin Node Configuration
Example /etc/munin/munin-node.conf multi-server, multi-node access control configuration

# Set this if the client doesn't report the correct hostname when
# telnetting to localhost, port 4949

host_name primary.home

# A list of addresses that are allowed to connect.  This must be a
# regular expression, since Net::Server does not understand CIDR-style
# network notation unless the perl module Net::CIDR is installed.  You
# may repeat the allow line as many times as you'd like

allow ^127\.0\.0\.1$
allow ^::1$

# If you have installed the Net::CIDR perl module, you can use one or more
# cidr_allow and cidr_deny address/mask patterns.  A connecting client must
# match any cidr_allow, and not match any cidr_deny.  Note that a netmask
# *must* be provided, even if it's /32

# primary.home
cidr_allow 192.168.1.10/32
# secondary.home
cidr_allow 192.168.1.20/32
# desktop.home
cidr_allow 192.168.1.40/32
# laptop.home
cidr_allow 192.168.1.100/32
```

.SS Munin Server Configuration
Example /etc/munin/munin.conf or /etc/munin/munin-conf.d/00-nodes.conf multi-server, multi-node access control configuration

# primary.home
[primary.home]
    address 192.168.1.10
    use_node_name yes

# secondary.home
[secondary.home]
    address 192.168.1.20
    use_node_name yes

# desktop.home
[desktop.home]
    address 192.168.1.40
    use_node_name yes

# laptop.home
[laptop.home]
    address 192.168.1.100
    use_node_name yes

.SH SEE ALSO
munin(8), munin-node(1p)

.SH BUGS
 - Plugin not working with remote docker PiHole instance
   https://github.com/saint-lascivious/munin-pihole-plugins/issues/6

.SH LICENSE
GNU GPL v3.0 (https://www.gnu.org/licenses/gpl-3.0-standalone.html)

.SH SOURCE
munin-pihole-plugins on GitHub (https://github.com/saint-lascivious/munin-pihole-plugins)

.SH AUTHOR
saint-lascivious (Hayden Pearce), Â©2022

.SH CONTACT
munin-pihole-plugins@sainternet.xyz
